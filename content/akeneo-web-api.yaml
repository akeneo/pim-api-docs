swagger: '2.0'
info:
  title: Akeneo PIM API
  version: "1.0.0"
# the domain of the service
host: demo.akeneo.com
# array of all schemes that your API supports
schemes:
  - http
produces:
  - application/json
paths:
  /api/rest/v1:
    get:
      summary: Get list of all endpoints
      operationId: "get_endpoints"
      description: This endpoint allows you to get the list of all the available endpoints. No need to be authenticated to use this endpoint.
      tags:
        - Overview
      x-versions:
        - 1.7
        - 2.0
      x-no-token: true
      responses:
        200:
          description: Return the list of all available endpoints
          x-no-entity: true
          schema:
            type: object
            properties:
              host:
                type: string
                description: Host name
              authentication:
                type: object
                description: Endpoint to get the authentication token
              routes:
                type: object
                description: All the availables endpoints
          examples: {
            "host": "https://demo.akeneo.com",
            "authentication": {
              "fos_oauth_server_token": {
                "route": "/api/oauth/v1/token",
                "methods": [
                  "POST"
                ]
              }
            },
            "routes": {
              "pim_api_category_list": {
                  "route": "/api/rest/v1/categories",
                  "methods": ["GET"]
              },
              "pim_api_category_get": {
                  "route": "/api/rest/v1/categories/{code}",
                  "methods": ["GET"]
              },
              "pim_api_category_create": {
                  "route": "/api/rest/v1/categories",
                  "methods": ["POST"]
              },
              "pim_api_category_partial_update": {
                  "route": "/api/rest/v1/categories/{code}",
                  "methods": ["PATCH"]
              }
            }
          }
        406:
          $ref: "#/responses/406Error"
  /api/oauth/v1/token:
    post:
      summary: Get authentication token
      operationId: "post_token"
      description: This endpoint allows you to get an authentication token. No need to be authenticated to use this endpoint.
      tags:
        - Authentication
      x-versions:
        - 1.7
        - 2.0
      x-no-token: true
      parameters:
        - name: Authorization
          in: header
          type: string
          required: true
          description: Equal to 'Basic xx', where 'xx' is the base 64 encoding of the client id and secret. Find out how to generate them in the <a href="/documentation/security.html#create-an-oauth-client">Create an OAuth client</a> section.
        - name: body
          in: body
          schema:
            type: object
            properties:
              username:
                type: string
                description: Your PIM username
              password:
                type: string
                description: Your PIM password
              grant_type:
                type: string
                description: Always equal to "password"
            example:
              {
                "username" : "admin",
                "password": "admin",
                "grant_type": "password"
              }
      responses:
        200:
          description: Return an authentication token
          x-no-entity: true
          schema:
            type: object
            properties:
              access_token:
                type: string
                description: Authentication token that should be given in every authenticated request to the API
              expires_in:
                type: integer
                description: Validity of the token given in seconds, 3600s = 1h by default
              token_type:
                type: string
                description: Token type, always equal to "bearer"
              scope:
                type: string
                description: Unused, always equal to "null"
              refresh_token:
                type: string
                description: Use this token when your access token has expired. See <a href="/documentation/security.html#refresh-an-expired-token">Refresh an expired token</a> section for more details.
          examples: {
            "access_token": "ZTZmYjU4ZmQxZWNmMzk1M2NlYzA5NmFhNmIzVjExMzE4NmJmODBkZGIyYTliYmQyNjk2ZDQwZThmNjdiZDQzOQ",
            "expires_in": 3600,
            "token_type": "bearer",
            "scope": null,
            "refresh_token": "M2FlODI0OTE3ODMyNjViMzRiOWE5ODMyNWViMThkNDU5YzJjNjFiZjNkZWFjMzIyYjc4YTgzZWY1MjE5ZTY5Mw"
          }
        400:
          $ref: "#/responses/400Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"
  /api/rest/v1/products:
    get:
      summary: Get list of products
      operationId: "get_products"
      tags:
        - Products
      x-versions:
        - 1.7
        - 2.0
      description: This endpoint allows you to get a list of products. Products are paginated and they can be filtered. If you are using a v2.0 Entreprise Edition PIM, permissions based on your user groups are applied to the set of products you request.
      parameters:
        - name: search
          in: query
          description: Filter products, for more details see the <a href="/documentation/filter.html">Filters</a> section
          required: false
          type: string
        - name: scope
          in: query
          type: string
          description: Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section
          required: false
        - name: locales
          in: query
          type: string
          description: Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section
          required: false
        - name: attributes
          in: query
          type: string
          description: Filter product values to only return those concerning the given attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section
          required: false
        - $ref: '#/parameters/pagination_type'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/search_after'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/with_count'
      responses:
        200:
          description: Return products paginated
          schema:
            title: Products
            type: object
            allOf:
              - $ref: '#/definitions/Pagination'
              - properties:
                  _embedded:
                    type: object
                    properties:
                      _items:
                        type: array
                        items:
                          $ref: '#/definitions/ProductList'
          examples: {
            _links: {
              self: {
                href: "https://demo.akeneo.com/api/rest/v1/products?page=3&limit=3"
              },
              first: {
                href: "https://demo.akeneo.com/api/rest/v1/products?page=1&limit=3"
              },
              previous: {
                href: "https://demo.akeneo.com/api/rest/v1/products?page=2&limit=3"
              },
              next: {
                href: "https://demo.akeneo.com/api/rest/v1/products?page=4&limit=3"
              }
            },
            current_page: 3,
            _embedded: {
              _items: [
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/product/top"
                    }
                  },
                  "identifier": "top",
                  "family": "tshirt",
                  "groups": [],
                  "parent": null,
                  "categories": ["summer_collection"],
                  "enabled": true,
                  "values": {
                    "name": [
                      {
                        "data": "Top",
                        "locale": "en_US",
                        "scope": null,
                      },
                      {
                        "data": "Débardeur",
                        "locale": "fr_FR",
                        "scope": null,
                      }
                    ],
                    "description": [
                      {
                        "data": "Summer top",
                        "locale": "en_US",
                        "scope": "ecommerce"
                      },
                      {
                        "data": "Top",
                        "locale": "en_US",
                        "scope": "tablet"
                      },
                      {
                        "data": "Débardeur pour l'été",
                        "locale": "fr_FR",
                        "scope": "ecommerce"
                      },
                      {
                        "data": "Débardeur",
                        "locale": "fr_FR",
                        "scope": "tablet"
                      }
                    ],
                    "price": [
                      {
                        "locale": null,
                        "scope": null,
                        "data": [
                          {
                            "amount": "15.5", "currency": "EUR"
                          },
                          {
                            "amount": "15", "currency": "USD"
                          }
                        ]
                      }
                    ],
                    "color": [
                      {
                        "locale": null,
                        "scope": null,
                         "data": "black"
                      }
                    ],
                    "size": [
                      {
                        "locale": null,
                        "scope": null,
                        "data": "m"
                      }
                    ]
                  },
                  "created": "2016-06-23T18:24:44+02:00",
                  "updated": "2016-06-25T17:56:12+02:00",
                  "associations": {
                    "PACK": {
                      "products": ["sunglasses"],
                      "groups": []
                    },
                  }
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/product/cap"
                    }
                  },
                  "identifier": "cap",
                  "family": "caps",
                  "groups": [],
                  "parent": null,
                  "categories": ["summer_collection"],
                  "enabled": true,
                  "values": {
                    "name": [
                      {
                        "data": "Cap",
                        "locale": "en_US",
                        "scope": null,
                      },
                      {
                        "data": "Casquette",
                        "locale": "fr_FR",
                        "scope": null,
                      }
                    ],
                    "description": [
                      {
                        "data": "Cap unisex",
                        "locale": "en_US",
                        "scope": "ecommerce"
                      },
                      {
                        "data": "Cap unisex",
                        "locale": "en_US",
                        "scope": "tablet"
                      },
                      {
                        "data": "Casquette unisexe",
                        "locale": "fr_FR",
                        "scope": "ecommerce"
                      },
                      {
                        "data": "Casquette unisexe",
                        "locale": "fr_FR",
                        "scope": "tablet"
                      }
                    ],
                    "price": [
                      {
                        "locale": null,
                        "scope": null,
                        "data": [
                          {
                            "amount": "20", "currency": "EUR"
                          },
                          {
                            "amount": "20", "currency": "USD"
                          }
                        ]
                      }
                    ],
                    "color": [
                      {
                        "locale": null,
                        "scope": null,
                         "data": "black"
                      }
                    ]
                  },
                  "created": "2016-06-23T18:24:44+02:00",
                  "updated": "2016-06-25T17:56:12+02:00",
                  "associations": {
                    "PACK": {
                      "products": ['sunglasses'],
                      "groups": []
                    }
                  }
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/product/sweat"
                    }
                  },
                  "identifier": "sweat",
                  "family": null,
                  "groups": [],
                  "parent": null,
                  "categories": ["winter_collection"],
                  "enabled": true,
                  "values": {
                  },
                  "created": "2016-06-23T11:24:44+02:00",
                  "updated": "2016-06-23T11:24:44+02:00",
                  "associations": {}
                }
              ]
            }
          }
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        406:
          $ref: "#/responses/406Error"
        422:
          $ref: "#/responses/422Error"
    post:
      summary: Create a new product
      operationId: "post_products"
      tags:
        - Products
      x-versions:
        - 1.7
        - 2.0
      description: This endpoint allows you to create a new product. If you are using a v2.0 Entreprise Edition PIM, permissions based on your user groups are applied to the product you try to create.
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Product"
      responses:
        201:
          $ref: "#/responses/Created"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"
    patch:
      summary: Update/create several products
      operationId: "patch_products"
      tags:
        - Products
      x-versions:
        - 1.7
        - 2.0
      description: This endpoint allows you to update and/or create several products at once. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. If you are using a v2.0 Entreprise Edition PIM, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product's categories.
      x-body-by-line: Contains several lines, each line is a product in JSON standard format
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Product"
            x-examples:
              x-example-1:
                '{"identifier":"cap","values":{"description":[{"scope":"ecommerce","locale":"en_US","data":"My amazing cap"}]}}'
              x-example-2:
                '{"identifier":"mug","group":["promotion"]}'
              x-example-3:
                '{"identifier":"tshirt","family":"clothes"}'
      responses:
        200:
          description: OK
          x-details: Returns a plain text response whose lines are JSON containing the status of each update or creation
          x-no-entity: true
          schema:
            $ref: "#/definitions/ErrorByLine"
          examples:
            x-example-1:
              '{"line":1,"identifier":"cap","status_code":204}'
            x-example-2:
              '{"line":2,"identifier":"mug","status_code":422,"message":"Property "group" does not exist."}'
            x-example-3:
              '{"line":3,"identifier":"tshirt","status_code":201}'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        413:
          $ref: "#/responses/413Error"
        415:
          $ref: "#/responses/415ErrorStream"
  /api/rest/v1/products/{code}:
    get:
      summary: Get a product
      operationId: "get_products__code_"
      tags:
        - Products
      x-versions:
        - 1.7
        - 2.0
      description: This endpoint allows you to get the information about a given product. If you are using a v2.0 Entreprise Edition PIM, permissions based on your user groups are applied to the product you request.
      parameters:
        - $ref: '#/parameters/code'
      responses:
        200:
          description: OK
          x-details: Returns the content of the product in JSON standard format
          schema:
            $ref: '#/definitions/Product'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        406:
          $ref: "#/responses/406Error"
        404:
          $ref: "#/responses/404Error"
    patch:
      summary: Update/create a product
      operationId: "patch_products__code_"
      tags:
        - Products
      x-versions:
        - 1.7
        - 2.0
      description: This endpoint allows you to update a given product. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. If you are using a v2.0 Entreprise Edition PIM, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product's categories.
      parameters:
        - $ref: '#/parameters/code'
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        201:
          $ref: "#/responses/Created"
        204:
          $ref: "#/responses/NoContent"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"
    delete:
      summary: Delete a product
      operationId: "delete_products__code_"
      tags:
        - Products
      x-versions:
        - 1.7
        - 2.0
      description: This endpoint allows you to delete a given product. If you are using a v2.0 Entreprise Edition PIM, permissions based on your user groups are applied to the product you try to delete.
      parameters:
        - $ref: '#/parameters/code'
      responses:
        204:
          description: No content to return
          x-details: Means that the deletion was successful
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        404:
          $ref: "#/responses/404Error"

  /api/rest/v1/products/{code}/proposal:
    post:
      summary: Submit a draft for approval
      operationId: "post_proposal"
      tags:
        - Products
      x-versions:
        - 2.0
      x-ee: true
      description: This endpoint allows you to submit a draft for approval.
      parameters:
        - $ref: '#/parameters/code'
      responses:
        201:
          $ref: "#/responses/Submitted"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"
  /api/rest/v1/products/{code}/draft:
    get:
      summary: Get a draft
      operationId: "get_draft__code_"
      tags:
        - Products
      x-versions:
        - 2.0
      x-ee: true
      description: This endpoint allows you to get the information about a given draft.
      parameters:
        - $ref: '#/parameters/code'
      responses:
        200:
          description: OK
          x-details: Returns the content of the draft in JSON standard format
          schema:
            $ref: '#/definitions/Product'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        406:
          $ref: "#/responses/406Error"
        404:
          $ref: "#/responses/404Error"

  /api/rest/v1/product-models:
    get:
      summary: Get list of product models
      operationId: "get_product_models"
      tags:
        - Product models
      x-versions:
        - 2.0
      description: This endpoint allows you to get a list of product models. Product models are paginated.
      parameters:
        - $ref: '#/parameters/pagination_type'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/search_after'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/with_count'
      responses:
        200:
          description: Return product models paginated
          schema:
            title: Product Models
            type: object
            allOf:
              - $ref: '#/definitions/Pagination'
              - properties:
                  _embedded:
                    type: object
                    properties:
                      _items:
                        type: array
                        items:
                          $ref: '#/definitions/ProductModelList'
          examples: {
            "_links": {
              "self": {
                "href": "http://demo.akeneo.com/api/rest/v1/product-models?pagination_type=search_after&limit=3&search_after=qg%3D%3D"
              },
              "first": {
                "href": "http://demo.akeneo.com/api/rest/v1/product-models?pagination_type=search_after&limit=3"
              },
              "next": {
                "href": "http://demo.akeneo.com/api/rest/v1/product-models?pagination_type=search_after&limit=3&search_after=rw%3D%3D"
              }
            },
            "_embedded": {
              "items": [
                {
                  "_links": {
                    "self": {
                      "href": "http:\/\/demo.akeneo.com\/api\/rest\/v1\/product-models\/shoes"
                    }
                  },
                  "code": "shoes",
                  "family_variant": "familyVariantA1",
                  "parent": null,
                  "categories": ["clothing", "shoes"],
                  "values": {
                    "price": [
                      {
                        "locale": null,
                        "scope": null,
                        "data": [
                          {
                            "amount": "50.00",
                            "currency": "EUR"
                          }
                        ]
                      }
                    ],
                    "description": [
                      {
                        "locale": "en_US",
                        "scope": "ecommerce",
                        "data": "I like shoes!"
                      }
                    ]
                  },
                  "created": "2017-10-04T18:04:10+02:00",
                  "updated": "2017-10-04T18:04:10+02:00"
                },
                {
                  "_links": {
                    "self": {
                      "href": "http:\/\/demo.akeneo.com\/api\/rest\/v1\/product-models\/tshirt"
                    }
                  },
                  "code": "tshirt",
                  "family_variant": "familyVariantA1",
                  "parent": null,
                  "categories": ["clothing", "tshirt"],
                  "values": {
                    "price": [
                      {
                        "locale": null,
                        "scope": null,
                        "data": [
                          {
                            "amount": "50.00",
                            "currency": "EUR"
                          }
                        ]
                      }
                    ],
                    "description": [
                      {
                        "locale": "en_US",
                        "scope": "ecommerce",
                        "data": "I like tshirt!"
                      }
                    ]
                  },
                  "created": "2017-10-04T18:04:10+02:00",
                  "updated": "2017-10-04T18:04:10+02:00"
                },
                {
                  "_links": {
                    "self": {
                      "href": "http:\/\/demo.akeneo.com\/api\/rest\/v1\/product-models\/trousers"
                    }
                  },
                  "code": "trousers",
                  "family_variant": "familyVariantA1",
                  "parent": null,
                  "categories": ["clothing", "trousers"],
                  "values": {
                    "price": [
                      {
                        "locale": null,
                        "scope": null,
                        "data": [
                          {
                            "amount": "50.00",
                            "currency": "EUR"
                          }
                        ]
                      }
                    ],
                    "description": [
                      {
                        "locale": "en_US",
                        "scope": "ecommerce",
                        "data": "I like trousers!"
                      }
                    ]
                  },
                  "created": "2017-10-04T18:04:10+02:00",
                  "updated": "2017-10-04T18:04:10+02:00"
                }
              ]
            }
          }
        401:
          $ref: "#/responses/401Error"
        406:
          $ref: "#/responses/406Error"
        422:
          $ref: "#/responses/422Error"
    post:
      summary: Create a new product model
      operationId: "post_product_models"
      tags:
        - Product models
      x-versions:
        - 2.0
      description: This endpoint allows you to create a new product model.
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/ProductModel"
      responses:
        201:
          $ref: "#/responses/Created"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"
    patch:
      summary: Update/create several product models
      operationId: "patch_product_models"
      tags:
        - Product models
      x-versions:
        - 2.0
      description: This endpoint allows you to update and/or create several product models at once. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product models exists for the given code, it creates it.
      x-body-by-line: Contains several lines, each line is a product model in JSON standard format
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/ProductModel"
            x-examples:
              x-example-1:
                '{"code": "sub_sweat_option_a", "parent": "sweat", "values": {"a_simple_select": [{"locale": null, "scope": null, "data": "optionA"}]}}'
              x-example-2:
                '{"code": "sub_sweat_option_b", "parent": "sweat", "values": {"a_simple_select": [{"locale": null, "scope": null, "data": "optionA"}]}}'
              x-example-3:
                '{"code":"tshirt", "parent": "root_tshirt", "family_variant":"clothesvariant","values":{"description":[{"scope":"ecommerce","locale":"en_US","data":"My amazing tshirt"}]}}'
      responses:
        200:
          description: OK
          x-details: Returns a plain text response whose lines are JSON containing the status of each update or creation
          x-no-entity: true
          schema:
            $ref: "#/definitions/ErrorByLine"
          examples:
            x-example-1:
              '{"line":1,"code":"sub_sweat_option_a","status_code":204}'
            x-example-2:
              '{"line":2,"code":"sub_sweat_option_b","status_code":422,"message":"Validation failed.","errors":[{"property":"attribute","message":"Cannot set value \"Option A\" for the attribute axis \"a_simple_select\", as another sibling entity already has this value"}]}'
            x-example-3:
              '{"line":3,"code":"tshirt","status_code":201}'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        413:
          $ref: "#/responses/413Error"
        415:
          $ref: "#/responses/415ErrorStream"

  /api/rest/v1/product-models/{code}:
    get:
      summary: Get a product model
      operationId: "get_product_models__code_"
      tags:
        - Product models
      x-versions:
        - 2.0
      description: This endpoint allows you to get the information about a given product model.
      parameters:
        - $ref: '#/parameters/code'
      responses:
        200:
          description: OK
          x-details: Returns the content of the product model in JSON standard format.
          schema:
            $ref: '#/definitions/ProductModel'
        401:
          $ref: "#/responses/401Error"
        404:
          $ref: "#/responses/404Error"
        406:
          $ref: "#/responses/406Error"
    patch:
      summary: Update/create a product model
      operationId: "patch_product_models__code_"
      tags:
        - Product models
      x-versions:
        - 2.0
      description: This endpoint allows you to update a given product model. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product model exists for the given code, it creates it.
      parameters:
        - $ref: '#/parameters/code'
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/ProductModel"
      responses:
        201:
          $ref: "#/responses/Created"
        204:
          $ref: "#/responses/NoContent"
        401:
          $ref: "#/responses/401Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"

  /api/rest/v1/published-products:
      get:
        summary: Get list of published products
        operationId: "get_published_products"
        description: This endpoint allows you to get a list of published products. Published products are paginated and they can be filtered.
        tags:
          - Published products
        x-versions:
          - 2.0
        x-ee: true
        parameters:
          - name: search
            in: query
            description: Filter published products, for more details see the <a href="/documentation/filter.html">Filters</a> section
            required: false
            type: string
          - name: scope
            in: query
            type: string
            description: Filter published product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on published product values</a> section
            required: false
          - name: locales
            in: query
            type: string
            description: Filter published product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on published product values</a> section
            required: false
          - name: attributes
            in: query
            type: string
            description: Filter published product values to only return those concerning the given attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section
            required: false
          - $ref: '#/parameters/pagination_type'
          - $ref: '#/parameters/page'
          - $ref: '#/parameters/search_after'
          - $ref: '#/parameters/limit'
          - $ref: '#/parameters/with_count'
        responses:
          200:
            description: Return published products paginated
            schema:
              title: Products
              type: object
              allOf:
                - $ref: '#/definitions/Pagination'
                - properties:
                    _embedded:
                      type: object
                      properties:
                        _items:
                          type: array
                          items:
                            $ref: '#/definitions/PublishedProductList'
            examples: {
              _links: {
                self: {
                  href: "https://demo.akeneo.com/api/rest/v1/published-products?page=3&limit=3"
                },
                first: {
                  href: "https://demo.akeneo.com/api/rest/v1/published-products?page=1&limit=3"
                },
                previous: {
                  href: "https://demo.akeneo.com/api/rest/v1/published-products?page=2&limit=3"
                },
                next: {
                  href: "https://demo.akeneo.com/api/rest/v1/published-products?page=4&limit=3"
                }
              },
              current_page: 3,
              _embedded: {
                _items: [
                  {
                    "_links": {
                      "self": {
                        "href": "https://demo.akeneo.com/api/rest/v1/published-products/top"
                      }
                    },
                    "identifier": "top",
                    "family": "tshirt",
                    "groups": [],
                    "categories": ["summer_collection"],
                    "enabled": true,
                    "values": {
                      "name": [
                        {
                          "data": "Top",
                          "locale": "en_US",
                          "scope": null,
                        },
                        {
                          "data": "Débardeur",
                          "locale": "fr_FR",
                          "scope": null,
                        }
                      ],
                      "description": [
                        {
                          "data": "Summer top",
                          "locale": "en_US",
                          "scope": "ecommerce"
                        },
                        {
                          "data": "Top",
                          "locale": "en_US",
                          "scope": "tablet"
                        },
                        {
                          "data": "Débardeur pour l'été",
                          "locale": "fr_FR",
                          "scope": "ecommerce"
                        },
                        {
                          "data": "Débardeur",
                          "locale": "fr_FR",
                          "scope": "tablet"
                        }
                      ],
                      "price": [
                        {
                          "locale": null,
                          "scope": null,
                          "data": [
                            {
                              "amount": "15.5", "currency": "EUR"
                            },
                            {
                              "amount": "15", "currency": "USD"
                            }
                          ]
                        }
                      ],
                      "color": [
                        {
                          "locale": null,
                          "scope": null,
                           "data": "black"
                        }
                      ],
                      "size": [
                        {
                          "locale": null,
                          "scope": null,
                          "data": "m"
                        }
                      ]
                    },
                    "created": "2016-06-23T18:24:44+02:00",
                    "updated": "2016-06-25T17:56:12+02:00",
                    "associations": {
                      "PACK": {
                        "products": ["sunglasses"],
                        "groups": []
                      },
                    }
                  },
                  {
                    "_links": {
                      "self": {
                        "href": "https://demo.akeneo.com/api/rest/v1/published-products/cap"
                      }
                    },
                    "identifier": "cap",
                    "family": "caps",
                    "groups": [],
                    "categories": ["summer_collection"],
                    "enabled": true,
                    "values": {
                      "name": [
                        {
                          "data": "Cap",
                          "locale": "en_US",
                          "scope": null,
                        },
                        {
                          "data": "Casquette",
                          "locale": "fr_FR",
                          "scope": null,
                        }
                      ],
                      "description": [
                        {
                          "data": "Cap unisex",
                          "locale": "en_US",
                          "scope": "ecommerce"
                        },
                        {
                          "data": "Cap unisex",
                          "locale": "en_US",
                          "scope": "tablet"
                        },
                        {
                          "data": "Casquette unisexe",
                          "locale": "fr_FR",
                          "scope": "ecommerce"
                        },
                        {
                          "data": "Casquette unisexe",
                          "locale": "fr_FR",
                          "scope": "tablet"
                        }
                      ],
                      "price": [
                        {
                          "locale": null,
                          "scope": null,
                          "data": [
                            {
                              "amount": "20", "currency": "EUR"
                            },
                            {
                              "amount": "20", "currency": "USD"
                            }
                          ]
                        }
                      ],
                      "color": [
                        {
                          "locale": null,
                          "scope": null,
                           "data": "black"
                        }
                      ]
                    },
                    "created": "2016-06-23T18:24:44+02:00",
                    "updated": "2016-06-25T17:56:12+02:00",
                    "associations": {
                      "PACK": {
                        "products": ['sunglasses'],
                        "groups": []
                      }
                    }
                  },
                  {
                    "_links": {
                      "self": {
                        "href": "https://demo.akeneo.com/api/rest/v1/published-products/sweat"
                      }
                    },
                    "identifier": "sweat",
                    "family": null,
                    "groups": [],
                    "categories": ["winter_collection"],
                    "enabled": true,
                    "values": {
                    },
                    "created": "2016-06-23T11:24:44+02:00",
                    "updated": "2016-06-23T11:24:44+02:00",
                    "associations": {}
                  }
                ]
              }
            }
          400:
            $ref: "#/responses/400Error"
          401:
            $ref: "#/responses/401Error"
          403:
            $ref: "#/responses/403Error"
          406:
            $ref: "#/responses/406Error"
          422:
            $ref: "#/responses/422Error"
  /api/rest/v1/published-products/{code}:
      get:
        summary: Get a published product
        operationId: "get_published_products__code_"
        tags:
          - Published products
        x-versions:
          - 2.0
        x-ee: true
        description: This endpoint allows you to get the information about a given published product.
        parameters:
          - $ref: '#/parameters/code'
        responses:
          200:
            description: OK
            x-details: Returns the content of the published product in JSON standard format
            schema:
              $ref: '#/definitions/PublishedProduct'
          401:
            $ref: "#/responses/401Error"
          403:
            $ref: "#/responses/403Error"
          406:
            $ref: "#/responses/406Error"
          404:
            $ref: "#/responses/404Error"

  /api/rest/v1/categories:
    get:
      summary: Get list of categories
      operationId: "get_categories"
      description: This endpoint allows you to get a list of categories. Categories are paginated and sorted by `root/left`.
      tags:
        - Categories
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/with_count'
      responses:
        200:
          description: Return categories paginated
          schema:
            title: Categories
            type: object
            allOf:
              - $ref: '#/definitions/Pagination'
              - properties:
                  _embedded:
                    type: object
                    properties:
                      _items:
                        type: array
                        items:
                          $ref: '#/definitions/CategoryList'
          examples: {
            _links: {
              self: {
                href: "https://demo.akeneo.com/api/rest/v1/categories?page=2&limit=5"
              },
              first: {
                href: "https://demo.akeneo.com/api/rest/v1/categories?page=1&limit=5"
              },
              previous: {
                href: "https://demo.akeneo.com/api/rest/v1/categories?page=1&limit=5"
              },
              next: {
                href: "https://demo.akeneo.com/api/rest/v1/categories?page=3&limit=5"
              }
            },
            current_page: 2,
            _embedded: {
              _items: [
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/categories/winter_collection"
                    }
                  },
                  "code": "winter_collection",
                  "parent": null,
                  "labels": {
                    "en_US": "Winter collection",
                    "fr_FR": "Collection hiver",
                    "de_DE": "Winter-Kollektion"
                  }
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/categories/woman"
                    }
                  },
                  "code": "woman",
                  "parent": "winter_collection",
                  "labels": {
                    "en_US": "Woman",
                    "fr_FR": "Femme",
                    "de_DE": "Damen"
                  }
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/categories/man"
                    }
                  },
                  "code": "man",
                  "parent": "winter_collection",
                  "labels": {
                    "en_US": "Man",
                    "fr_FR": "Homme",
                    "de_DE": "Herren"
                  }
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/categories/kids"
                    }
                  },
                  "code": "kids",
                  "parent": "winter_collection",
                  "labels": {
                    "en_US": "Kids",
                    "fr_FR": "Enfant",
                    "de_DE": "Kinder"
                  }
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/categories/summer_collection"
                    }
                  },
                  "code": "summer_collection",
                  "parent": null,
                  "labels": {
                    "en_US": "Summer collection",
                    "fr_FR": "Collection été",
                    "de_DE": "Sommer-Kollektion"
                  }
                }
              ]
            }
          }
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        406:
          $ref: "#/responses/406Error"
    post:
      summary: Create a new category
      operationId: "post_categories"
      description: This endpoint allows you to create a new category.
      tags:
        - Categories
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Category"
      responses:
        201:
          $ref: "#/responses/Created"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"
    patch:
      summary: Update/create several categories
      operationId: "patch_categories"
      tags:
        - Categories
      x-versions:
        - 1.7
        - 2.0
      description: This endpoint allows you to update several categories at once.
      x-body-by-line: Contains several lines, each line is a category in JSON standard format
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Category"
            x-examples:
              x-example-1:
                '{"code":"spring_collection","parent":null}'
              x-example-2:
                '{"code":"woman","parent":"spring_collectionn"}'
              x-example-3:
                '{"code":"man","parent":"spring_collection"}'
      responses:
        200:
          description: OK
          x-details: Returns a plain text response whose lines are JSON containing the status of each update or creation
          x-no-entity: true
          schema:
            $ref: "#/definitions/ErrorByLine"
          examples:
            x-example-1:
              '{"line":1,"code":"spring_collection","status_code":201}'
            x-example-2:
              '{"line":2,"code":"woman","status_code":422,"message":"Category "spring_collectionn" does not exist."}'
            x-example-3:
              '{"line":3,"code":"man","status_code":204}'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        413:
          $ref: "#/responses/413Error"
        415:
          $ref: "#/responses/415ErrorStream"
  /api/rest/v1/categories/{code}:
    get:
      summary: Get a category
      operationId: "get_categories__code_"
      description: This endpoint allows you to get the information about a given category.
      tags:
        - Categories
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - $ref: '#/parameters/code'
      responses:
        200:
          description: OK
          x-details: Returns the content of the category in JSON standard format
          schema:
            $ref: '#/definitions/Category'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        404:
          $ref: "#/responses/404Error"
        406:
          $ref: "#/responses/406Error"
    patch:
      summary: Update/create a category
      operationId: "patch_categories__code_"
      tags:
        - Categories
      x-versions:
        - 1.7
        - 2.0
      description: This endpoint allows you to update a given category. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no category exists for the given code, it creates it.
      parameters:
        - $ref: '#/parameters/code'
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/Category"
      responses:
        201:
          $ref: "#/responses/Created"
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"

  /api/rest/v1/families:
    get:
      summary: Get list of families
      operationId: "get_families"
      description: This endpoint allows you to get a list of families. Families are paginated and sorted by code.
      tags:
        - Families
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/with_count'
      responses:
        200:
          description: Return families paginated
          schema:
            title: Families
            type: object
            allOf:
              - $ref: '#/definitions/Pagination'
              - properties:
                  _embedded:
                    type: object
                    properties:
                      _items:
                        type: array
                        items:
                          $ref: '#/definitions/FamilyList'
          examples: {
            _links: {
              self: {
                href: "https://demo.akeneo.com/api/rest/v1/families?page=2&limit=2"
              },
              first: {
                href: "https://demo.akeneo.com/api/rest/v1/families?page=1&limit=2"
              },
              previous: {
                href: "https://demo.akeneo.com/api/rest/v1/families?page=1&limit=2"
              },
              next: {
                href: "https://demo.akeneo.com/api/rest/v1/families?page=3&limit=2"
              }
            },
            current_page: 2,
            _embedded: {
              _items: [
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/families/tshirt"
                    }
                  },
                  "code": "tshirt",
                  "attributes": ["sku", "name", "description", "price", "size", "color", "picture"],
                  "attribute_as_label": "name",
                  "attribute_as_image": "picture",
                  "attribute_requirements": {
                    "ecommerce": ["sku", "name", "description", "price", "size", "color"],
                    "tablet": ["sku", "name", "description", "price"]
                  },
                  "labels": {
                    "en_US": "Tshirt",
                    "fr_FR": "Tshirt"
                  }
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/families/caps"
                    }
                  },
                  "code": "caps",
                  "attributes": ["sku", "name", "description", "price", "color", "picture"],
                  "attribute_as_label": "name",
                  "attribute_as_image": "picture",
                  "attribute_requirements": {
                    "ecommerce": ["sku", "name", "description", "price", "color"],
                    "tablet": ["sku", "name", "description", "price"]
                  },
                  "labels": {
                    "en_US": "Caps",
                    "fr_FR": "Casquettes"
                  }
                }
              ]
            }
          }
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        406:
          $ref: "#/responses/406Error"
    post:
      summary: Create a new family
      operationId: "post_families"
      description: This endpoint allows you to create a new family.
      tags:
        - Families
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Family"
      responses:
        201:
          $ref: "#/responses/Created"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"
    patch:
      summary: Update/create several families
      operationId: "patch_families"
      tags:
        - Families
      x-versions:
        - 1.7
        - 2.0
      description: This endpoint allows you to update and/or create several families at once.
      x-body-by-line: Contains several lines, each line is a family in JSON standard format
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Family"
            x-examples:
              x-example-1:
                '{"code":"tshirt","attributes":["description","size"]}'
              x-example-2:
                '{"code":"cap","attribute_as_label":"descripion"}'
              x-example-3:
                '{"code":"mug","attributes":["description","short_description"]}'
      responses:
        200:
          description: OK
          x-details: Returns a plain text response whose lines are JSON containing the status of each update or creation
          x-no-entity: true
          schema:
            $ref: "#/definitions/ErrorByLine"
          examples:
            x-example-1:
              '{"line":1,"code":"tshirt","status_code":201}'
            x-example-2:
              '{"line":2,"code":"cap","status_code":422,"message":"Attribute "descripion" does not exist."}'
            x-example-3:
              '{"line":3,"code":"mug","status_code":204}'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        413:
          $ref: "#/responses/413Error"
        415:
          $ref: "#/responses/415ErrorStream"
  /api/rest/v1/families/{code}:
    get:
      summary: Get a family
      operationId: "get_families__code_"
      description: This endpoint allows you to get the information about a given family.
      tags:
        - Families
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - $ref: '#/parameters/code'
      responses:
        200:
          description: OK
          x-details: Returns the content of the family in JSON standard format
          schema:
            $ref: '#/definitions/Family'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        404:
          $ref: "#/responses/404Error"
        406:
          $ref: "#/responses/406Error"
    patch:
      summary: Update/create a family
      operationId: "patch_families__code_"
      tags:
        - Families
      x-versions:
        - 1.7
        - 2.0
      description: This endpoint allows you to update a given family. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no family exists for the given code, it creates it.
      parameters:
        - $ref: '#/parameters/code'
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/Family"
      responses:
        201:
          $ref: "#/responses/Created"
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"

  /api/rest/v1/families/{family_code}/variants:
    get:
      summary: Get list of family variants
      operationId: "get_families__family_code__variants"
      description: This endpoint allows you to get a list of family variants. Family variants are paginated and sorted by code.
      tags:
        - Families
      x-versions:
        - 2.0
      parameters:
        - $ref: '#/parameters/family_code'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/with_count'
      responses:
        200:
          description: Return family variants paginated
          schema:
            title: Family Variants
            type: object
            allOf:
              - $ref: '#/definitions/Pagination'
              - properties:
                  _embedded:
                    type: object
                    properties:
                      _items:
                        type: array
                        items:
                          $ref: '#/definitions/FamilyVariantList'
          examples: {
            "code": "shoesVariant",
            "labels":{
              "en_US": "Shoes variant",
              "fr_FR": "Variante de chaussures"
            },
            "variant_attribute_sets": [
              {
                "level": 1,
                "attributes": ["color", "material"],
                "axes": ["color"]
              },
              {
                  "level": 2,
                  "attributes": ["sku", "size"],
                  "axes": ["size"]
              }
            ]
          }
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        406:
          $ref: "#/responses/406Error"
    post:
      summary: Create a new family variant
      operationId: "post_families__family_code__variants"
      tags:
        - Families
      x-versions:
        - 2.0
      description: This endpoint allows you to create a family variant.
      parameters:
        - $ref: '#/parameters/family_code'
        - name: body
          in: body
          schema:
            $ref: "#/definitions/FamilyVariant"
      responses:
        201:
          $ref: "#/responses/Created"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"
  /api/rest/v1/families/{family_code}/variants/{code}:
    get:
      summary: Get a family variant
      operationId: "get_families__family_code__variants__code__"
      description: This endpoint allows you to get the information about a given family variant.
      tags:
        - Families
      x-versions:
        - 2.0
      parameters:
        - $ref: '#/parameters/family_code'
        - $ref: '#/parameters/code'
      responses:
        200:
          description: OK
          x-details: Returns the content of the family variant in JSON standard format
          schema:
            $ref: '#/definitions/FamilyVariant'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        404:
          $ref: "#/responses/404Error"
        406:
          $ref: "#/responses/406Error"

  /api/rest/v1/attributes:
    get:
      summary: Get list of attributes
      operationId: "get_attributes"
      description: This endpoint allows you to get a list of attributes. Attributes are paginated and sorted by code.
      tags:
        - Attributes
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/with_count'
      responses:
        200:
          description: Return attributes paginated
          schema:
            title: Attributes
            type: object
            allOf:
              - $ref: '#/definitions/Pagination'
              - properties:
                  _embedded:
                    type: object
                    properties:
                      _items:
                        type: array
                        items:
                          $ref: '#/definitions/AttributeList'
          examples: {
            _links: {
              self: {
                href: "https://demo.akeneo.com/api/rest/v1/attributes?page=3&limit=2"
              },
              first: {
                href: "https://demo.akeneo.com/api/rest/v1/attributes?page=1&limit=2"
              },
              previous: {
                href: "https://demo.akeneo.com/api/rest/v1/attributes?page=2&limit=2"
              },
              next: {
                href: "https://demo.akeneo.com/api/rest/v1/attributes?page=4&limit=2"
              }
            },
            current_page: 3,
            _embedded: {
              _items: [
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/attributes/sku"
                    }
                  },
                  "code": "sku",
                  "type": "pim_catalog_identifier",
                  "group": "other",
                  "unique": true,
                  "useable_as_grid_filter": true,
                  "allowed_extensions": [],
                  "metric_family": null,
                  "default_metric_unit": null,
                  "reference_data_name": null,
                  "available_locales": [],
                  "max_characters": null,
                  "validation_rule": null,
                  "validation_regexp": null,
                  "wysiwyg_enabled": false,
                  "number_min": null,
                  "number_max": null,
                  "decimals_allowed": false,
                  "negative_allowed": false,
                  "date_min": null,
                  "date_max": null,
                  "max_file_size": null,
                  "minimum_input_length": null,
                  "sort_order": 1,
                  "localizable": false,
                  "scopable": false,
                  "labels": {
                    "en_US": "Identifier",
                    "fr_FR": "Identifiant"
                  }
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/attributes/release_date"
                    }
                  },
                  "code": "release_date",
                  "type": "pim_catalog_date",
                  "group": "marketing",
                  "unique": false,
                  "useable_as_grid_filter": true,
                  "allowed_extensions": [],
                  "metric_family": null,
                  "default_metric_unit": null,
                  "reference_data_name": null,
                  "available_locales": [],
                  "max_characters": null,
                  "validation_rule": null,
                  "validation_regexp": null,
                  "wysiwyg_enabled": false,
                  "number_min": null,
                  "number_max": null,
                  "decimals_allowed": false,
                  "negative_allowed": false,
                  "date_min": "2017-06-28T08:00:00",
                  "date_max": "2017-08-08T22:00:00",
                  "max_file_size": null,
                  "minimum_input_length": null,
                  "sort_order": 1,
                  "localizable": false,
                  "scopable": false,
                  "labels": {
                    "en_US": "Sale date",
                    "fr_FR": "Date des soldes"
                  }
                }
              ]
            }
          }
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        406:
          $ref: "#/responses/406Error"
    post:
      summary: Create a new attribute
      operationId: "post_attributes"
      description: This endpoint allows you to create a new attribute.
      tags:
        - Attributes
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Attribute"
      responses:
        201:
          $ref: "#/responses/Created"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"
    patch:
      summary: Update/create several attributes
      operationId: "patch_attributes"
      tags:
        - Attributes
      x-versions:
        - 1.7
        - 2.0
      description: This endpoint allows you to update and/or create several attributes at once.
      x-body-by-line: Contains several lines, each line is an attribute in JSON standard format
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Attribute"
            x-examples:
              x-example-1:
                '{"code":"description","useable_as_grid_filter":true}'
              x-example-2:
                '{"code":"short_description","group":"marketig"}'
              x-example-3:
                '{"code":"release_date","date_min":"2017-06-28T08:00:00"}'
      responses:
        200:
          description: OK
          x-details: Returns a plain text response whose lines are JSON containing the status of each update or creation
          x-no-entity: true
          schema:
            $ref: "#/definitions/ErrorByLine"
          examples:
            x-example-1:
              '{"line":1,"code":"description","status_code":201}'
            x-example-2:
              '{"line":2,"code":"short_description","status_code":422,"message":"Group "marketig" does not exist."}'
            x-example-3:
              '{"line":3,"code":"release_date","status_code":204}'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        413:
          $ref: "#/responses/413Error"
        415:
          $ref: "#/responses/415ErrorStream"
  /api/rest/v1/attributes/{code}:
    get:
      summary: Get an attribute
      operationId: "get_attributes__code_"
      description: This endpoint allows you to get the information about a given attribute.
      tags:
        - Attributes
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - $ref: '#/parameters/code'
      responses:
        200:
          description: OK
          x-details: Returns the content of the attribute in JSON standard format
          schema:
            $ref: '#/definitions/Attribute'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        404:
          $ref: "#/responses/404Error"
        406:
          $ref: "#/responses/406Error"
    patch:
      summary: Update/create an attribute
      operationId: "patch_attributes__code_"
      tags:
        - Attributes
      x-versions:
        - 1.7
        - 2.0
      description: This endpoint allows you to update a given attribute. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no attribute exists for the given code, it creates it.
      parameters:
        - $ref: '#/parameters/code'
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/Attribute"
      responses:
        201:
          $ref: "#/responses/Created"
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"

  /api/rest/v1/attributes/{attribute_code}/options:
    get:
      summary: Get list of attribute options
      operationId: "get_attributes__attribute_code__options"
      description: This endpoint allows you to get a list of attribute options. Attribute options are paginated and sorted by code.
      tags:
        - Attribute options
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - $ref: '#/parameters/attribute_code'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/with_count'
      responses:
        200:
          description: Return attribute options paginated
          schema:
            title: Attribute Options
            type: object
            allOf:
              - $ref: '#/definitions/Pagination'
              - properties:
                  _embedded:
                    type: object
                    properties:
                      _items:
                        type: array
                        items:
                          $ref: '#/definitions/AttributeOptionList'
          examples: {
            _links: {
              self: {
                href: "https://demo.akeneo.com/api/rest/v1/attributes/color/options?page=3&limit=3"
              },
              first: {
                href: "https://demo.akeneo.com/api/rest/v1/attributes/color/options?page=1&limit=3"
              },
              previous: {
                href: "https://demo.akeneo.com/api/rest/v1/attributes/color/options?page=2&limit=3"
              },
              next: {
                href: "https://demo.akeneo.com/api/rest/v1/attributes/color/options?page=4&limit=3"
              }
            },
            current_page: 3,
            _embedded: {
              _items: [
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/attributes/color/options/red"
                    }
                  },
                  "code": "red",
                  "attribute": "a_simple_select",
                  "sort_order": 1,
                  "labels": {
                    "en_US": "Red",
                    "fr_FR": "Rouge"
                  }
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/attributes/color/options/black"
                    }
                  },
                  "code": "black",
                  "attribute": "a_simple_select",
                  "sort_order": 2,
                  "labels": {
                    "en_US": "Black",
                    "fr_FR": "Noir"
                  }
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/attributes/color/options/purple"
                    }
                  },
                  "code": "purple",
                  "attribute": "a_simple_select",
                  "sort_order": 3,
                  "labels": {
                    "en_US": "Purple",
                    "fr_FR": "Violet"
                  }
                }
              ]
            }
          }
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        406:
          $ref: "#/responses/406Error"
    post:
      summary: Create a new attribute option
      operationId: "post_attributes__attribute_code__options"
      description: This endpoint allows you to create a new attribute option.
      tags:
        - Attribute options
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - $ref: '#/parameters/attribute_code'
        - name: body
          in: body
          schema:
            $ref: "#/definitions/AttributeOption"
      responses:
        201:
          $ref: "#/responses/Created"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"
  /api/rest/v1/attributes/{attribute_code}/options/{code}:
    get:
      summary: Get an attribute option
      operationId: "get_attributes__attribute_code__options__code_"
      description: This endpoint allows you to get the information about a given attribute option.
      tags:
        - Attribute options
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - $ref: '#/parameters/attribute_code'
        - $ref: '#/parameters/code'
      responses:
        200:
          description: OK
          x-details: Returns the content of the attribute option in JSON standard format
          schema:
            $ref: '#/definitions/AttributeOption'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        404:
          $ref: "#/responses/404Error"
        406:
          $ref: "#/responses/406Error"
    patch:
      summary: Update/create an attribute option
      operationId: "patch_attributes__attribute_code__options__code_"
      tags:
        - Attribute options
      x-versions:
        - 1.7
        - 2.0
      description: This endpoint allows you to update a given attribute option. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no attribute option exists for the given code, it creates it.
      parameters:
        - $ref: '#/parameters/attribute_code'
        - $ref: '#/parameters/code'
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/AttributeOption"
      responses:
        201:
          $ref: "#/responses/Created"
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"

  /api/rest/v1/attribute-groups:
    get:
      summary: Get list of attribute groups
      operationId: "attribute_groups_get_list"
      description: This endpoint allows you to get a list of attribute groups. Attribute groups are paginated and sorted by code.
      tags:
        - Attribute groups
      x-versions:
        - 2.0
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/with_count'
      responses:
        200:
          description: Return attribute groups paginated
          schema:
            title: Attribute groups
            type: object
            allOf:
              - $ref: '#/definitions/Pagination'
              - properties:
                  _embedded:
                    type: object
                    properties:
                      _items:
                        type: array
                        items:
                          $ref: '#/definitions/AttributeGroupList'
          examples: {
            _links: {
              self: {
                href: "https://demo.akeneo.com/api/rest/v1/attribute-groups?page=3&limit=2"
              },
              first: {
                href: "https://demo.akeneo.com/api/rest/v1/attribute-groups?page=1&limit=2"
              },
              previous: {
                href: "https://demo.akeneo.com/api/rest/v1/attribute-groups?page=2&limit=2"
              },
              next: {
                href: "https://demo.akeneo.com/api/rest/v1/attribute-groups?page=4&limit=2"
              }
            },
            current_page: 3,
            _embedded: {
              _items: [
                {
                  "_links":{
                     "self":{
                        "href": "https://demo.akeneo.com/api/rest/v1/attribute-groups/marketing"
                     }
                  },
                  "code":"marketing",
                  "sort_order":4,
                  "attributes":[
                     "sku",
                     "name",
                     "description",
                     "response_time",
                     "release_date",
                     "price"
                  ],
                  "labels":{
                     "en_US":"Marketing",
                     "fr_FR":"Marketing"
                  }
                },
                {
                  "_links":{
                     "self":{
                        "href":"https://demo.akeneo.com/api/rest/v1/attribute-groups/technical"
                     }
                  },
                  "code":"technical",
                  "sort_order":5,
                  "attributes":[
                     "weight",
                     "maximum_scan_size",
                     "color_scanning",
                     "power_requirements",
                     "maximum_print_size",
                     "sensor_type",
                     "total_megapixels",
                     "optical_zoom",
                     "camera_type"
                  ],
                  "labels":{
                     "en_US":"Technical",
                     "fr_FR":"Technique"
                  }
                }
              ]
            }
          }
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        406:
          $ref: "#/responses/406Error"
    post:
      summary: Create a new attribute group
      operationId: "attribute_groups_post"
      description: This endpoint allows you to create a new attribute group.
      tags:
        - Attribute groups
      x-versions:
        - 2.0
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/AttributeGroup"
      responses:
        201:
          $ref: "#/responses/Created"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"
    patch:
      summary: Update/create several attribute groups
      operationId: "several_attribute_groups_patch"
      tags:
        - Attribute groups
      x-versions:
        - 2.0
      description: This endpoint allows you to update and/or create several attribute groups at once.
      x-body-by-line: Contains several lines, each line is an attribute group in JSON standard format
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/AttributeGroup"
            x-examples:
              x-example-1:
                '{"code":"technical","labels":{"en_US": "Technical", "fr_FR": "Technique"}}'
              x-example-2:
                '{"code":"marketing","type":"bar"}'
              x-example-3:
                '{"code":"design","sort_order":7}'
      responses:
        200:
          description: OK
          x-details: Returns a plain text response whose lines are JSON containing the status of each update or creation
          schema:
            $ref: "#/definitions/ErrorByLine"
          examples:
            x-example-1:
              '{"line":1,"code":"technical","status_code":201}'
            x-example-2:
              '{"line":2,"code":"marketing","status_code":422,"message":"Property \"type\" does not exist. Check the standard format documentation.","_links":{"documentation":{"href":"http:\/\/api.akeneo.com\/api-reference.html#patch_attribute_groups__code_"}'
            x-example-3:
              '{"line":3,"code":"design","status_code":204}'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        413:
          $ref: "#/responses/413Error"
        415:
          $ref: "#/responses/415ErrorStream"
  /api/rest/v1/attribute-groups/{code}:
    get:
      summary: Get an attribute group
      operationId: "attribute_groups_get"
      description: This endpoint allows you to get the information about a given attribute group.
      tags:
        - Attribute groups
      x-versions:
        - 2.0
      parameters:
        - $ref: '#/parameters/code'
      responses:
        200:
          description: OK
          x-details: Returns the content of the attribute group in JSON standard format
          schema:
            $ref: '#/definitions/AttributeGroup'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        404:
          $ref: "#/responses/404Error"
        406:
          $ref: "#/responses/406Error"
    patch:
      summary: Update/create an attribute group
      operationId: "attribute_groups_patch"
      tags:
        - Attribute groups
      x-versions:
        - 2.0
      description: This endpoint allows you to update a given attribute group. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no attribute group exists for the given code, it creates it.
      parameters:
        - $ref: '#/parameters/code'
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/AttributeGroup"
      responses:
        201:
          $ref: "#/responses/Created"
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"

  /api/rest/v1/media-files:
    get:
      summary: Get a list of media files
      operationId: "get_media_files"
      description: This endpoint allows you to get a list of media files.
      tags:
        - Media files
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/with_count'
      responses:
        200:
          description: Return media files paginated
          schema:
            title: MediaFiles
            type: object
            allOf:
              - $ref: '#/definitions/Pagination'
              - properties:
                  _embedded:
                    type: object
                    properties:
                      _items:
                        type: array
                        items:
                          $ref: '#/definitions/MediaFileList'
          examples: {
            _links: {
              self: {
                href: "https://demo.akeneo.com/api/rest/v1/media-files?page=2&limit=4"
              },
              first: {
                href: "https://demo.akeneo.com/api/rest/v1/media-files?page=1&limit=4"
              },
              previous: {
                href: "https://demo.akeneo.com/api/rest/v1/media-files?page=1&limit=4"
              },
              next: {
                href: "https://demo.akeneo.com/api/rest/v1/media-files?page=2&limit=4"
              }
            },
            current_page: 2,
            _embedded: {
              _items: [
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/media-files/7/5/8/e/758e39d48ea7b42a55091434fd3d8b6cf3189b7f_10806799_1356.jpg"
                    },
                    "download": {
                      "href": "https://demo.akeneo.com/api/rest/v1/media-files/7/5/8/e/758e39d48ea7b42a55091434fd3d8b6cf3189b7f_10806799_1356.jpg/download"
                    }
                  },
                  "code": "7/5/8/e/758e39d48ea7b42a55091434fd3d8b6cf3189b7f_10806799_1356.jpg",
                  "original_filename": "10806799-1356.jpg",
                  "mime_type": "image/jpeg",
                  "size": 16070,
                  "extension": "jpg"
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/media-files/d/0/3/2/d032a92d994df3ef67ee6746b7b7a795c2964e7c_10734346_1480.jpg"
                    },
                    "download": {
                      "href": "https://demo.akeneo.com/api/rest/v1/media-files/d/0/3/2/d032a92d994df3ef67ee6746b7b7a795c2964e7c_10734346_1480.jpg/download"
                    }
                  },
                  "code": "d/0/3/2/d032a92d994df3ef67ee6746b7b7a795c2964e7c_10734346_1480.jpg",
                  "original_filename": "10734346-1480.jpg",
                  "mime_type": "image/jpeg",
                  "size": 16454,
                  "extension": "jpg"
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/media-files/5/1/d/8/51d81dc778ba1501a8f998f3ab5797569f3b9e25_12431976_8797.jpg"
                    },
                    "download": {
                      "href": "https://demo.akeneo.com/api/rest/v1/media-files/5/1/d/8/51d81dc778ba1501a8f998f3ab5797569f3b9e25_12431976_8797.jpg/download"
                    }
                  },
                  "code": "5/1/d/8/51d81dc778ba1501a8f998f3ab5797569f3b9e25_12431976_8797.jpg",
                  "original_filename": "12431976-8797.jpg",
                  "mime_type": "image/jpeg",
                  "size": 19725,
                  "extension": "jpg"
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/media-files/0/c/b/0/0cb0c0e115dedba676f8d1ad8343e6207ab54c7b_107406_9841.jpg"
                    },
                    "download": {
                      "href": "https://demo.akeneo.com/api/rest/v1/media-files/0/c/b/0/0cb0c0e115dedba676f8d1ad8343e6207ab54c7b_107406_9841.jpg/download"
                    }
                  },
                  "code": "0/c/b/0/0cb0c0e115dedba676f8d1ad8343e6207ab54c7b_107406_9841.jpg",
                  "original_filename": "107406-9841.jpg",
                  "mime_type": "image/jpeg",
                  "size": 17639,
                  "extension": "jpg"
                }
              ]
            }
          }
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        406:
          $ref: "#/responses/406Error"
    post:
      summary: Create a new media file
      operationId: "post_media_files"
      description: This endpoint allows you to create a new media file and associate it to the product value of a given product.
      tags:
        - Media files
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - name: Content-type
          in: header
          type: string
          description: Equal to 'multipart/form-data', no other value allowed
          required: true
        - name: body
          in: body
          x-form-data: true
          schema:
            properties:
              product:
                type: string
                description: The product to which the media file will be associated. It is a JSON string that follows this formula '{"identifier":"product_identifier", "attribute":"attribute_code", "scope":"channel_code","locale":"locale_code"}'
              file:
                type: string
                description: The binaries of the file
                format: binary
      responses:
        201:
          $ref: "#/responses/Created"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415ErrorMultipart"
        422:
          $ref: "#/responses/422Error"
  /api/rest/v1/media-files/{code}:
    get:
      summary: Get a media file
      operationId: "get_media_files__code_"
      description: This endpoint allows you to get the information about a given media file.
      tags:
        - Media files
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - $ref: '#/parameters/code'
      responses:
        200:
          description: OK
          x-details: Returns the content of the media file in JSON standard format
          schema:
            $ref: '#/definitions/MediaFile'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        404:
          $ref: "#/responses/404Error"
        406:
          $ref: "#/responses/406Error"
  /api/rest/v1/media-files/{code}/download:
    get:
      summary: Download a media file
      operationId: "get_media_files__code__download"
      description: This endpoint allows you to download a given media file.
      x-content-type: Mime-type of the media file
      tags:
        - Media files
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - $ref: '#/parameters/code'
      responses:
        200:
          description: OK
          x-details: Returns the binary of the media file
          x-content-type: Mime-type of the media file
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        404:
          $ref: "#/responses/404Error"

  /api/rest/v1/locales:
    get:
      summary: Get a list of locales
      operationId: "get_locales"
      description: This endpoint allows you to get a list of locales. Locales are paginated and sorted by code.
      tags:
        - Locales
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/with_count'
      responses:
        200:
          description: Return locales paginated
          schema:
            title: Locales
            type: object
            allOf:
              - $ref: '#/definitions/Pagination'
              - properties:
                  _embedded:
                    type: object
                    properties:
                      _items:
                        type: array
                        items:
                          $ref: '#/definitions/LocaleList'
          examples: {
            _links: {
              self: {
                href: "https://demo.akeneo.com/api/rest/v1/locales?page=2&limit=4"
              },
              first: {
                href: "https://demo.akeneo.com/api/rest/v1/locales?page=1&limit=4"
              },
              previous: {
                href: "https://demo.akeneo.com/api/rest/v1/locales?page=1&limit=4"
              },
              next: {
                href: "https://demo.akeneo.com/api/rest/v1/locales?page=2&limit=4"
              }
            },
            current_page: 2,
            _embedded: {
              _items: [
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/locales/en_US"
                    }
                  },
                  "code": "en_US",
                  "enabled": true
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/locales/fr_FR"
                    }
                  },
                  "code": "fr_FR",
                  "enabled": true
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/locales/de_DE"
                    }
                  },
                  "code": "de_DE",
                  "enabled": true
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/locales/af_ZA"
                    }
                  },
                  "code": "af_ZA",
                  "enabled": false
                }
              ]
            }
          }
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        406:
          $ref: "#/responses/406Error"
  /api/rest/v1/locales/{code}:
    get:
      summary: Get a locale
      operationId: "get_locales__code_"
      description: This endpoint allows you to get the information about a given locale.
      tags:
        - Locales
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - $ref: '#/parameters/code'
      responses:
        200:
          description: OK
          x-details: Returns the content of the locale in JSON standard format
          schema:
            $ref: '#/definitions/Locale'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        404:
          $ref: "#/responses/404Error"
        406:
          $ref: "#/responses/406Error"

  /api/rest/v1/channels:
    get:
      summary: Get a list of channels
      operationId: "get_channels"
      description: This endpoint allows you to get a list of channels. Channels are paginated and sorted by code.
      tags:
        - Channels
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/with_count'
      responses:
        200:
          description: Return channels paginated
          schema:
            title: Channels
            type: object
            allOf:
              - $ref: '#/definitions/Pagination'
              - properties:
                  _embedded:
                    type: object
                    properties:
                      _items:
                        type: array
                        items:
                          $ref: '#/definitions/ChannelList'
          examples: {
            _links: {
              self: {
                href: "https://demo.akeneo.com/api/rest/v1/channels?page=1&limit=3"
              },
              first: {
                href: "https://demo.akeneo.com/api/rest/v1/channels?page=1&limit=3"
              }
            },
            current_page: 1,
            _embedded: {
              _items: [
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/channels/ecommerce"
                    }
                  },
                  "code": "ecommerce",
                  "currencies":["USD", "EUR"],
                  "locales":["en_US", "fr_FR", "de_DE"],
                  "category_tree":"master",
                  "conversion_units":{
                    "a_metric":"KILOWATT",
                    "a_metric_negative":"CELSIUS",
                    "a_metric_to_not_convert":null
                  },
                  "labels":{
                    "en_US":"Ecommerce",
                    "fr_FR":"E-commerce",
                    "de_DE":"E-commerce"
                  }
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/channels/mobile"
                    }
                  },
                  "code": "mobile",
                  "currencies":["USD", "EUR"],
                  "locales":["en_US", "fr_FR", "de_DE"],
                  "category_tree":"master",
                  "conversion_units":{
                    "a_metric":"KILOWATT",
                    "a_metric_negative":"CELSIUS",
                    "a_metric_to_not_convert":null
                  },
                  "labels":{
                    "en_US":"Mobile",
                    "fr_FR":"Mobile",
                    "de_DE":"Mobile"
                  }
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/channels/print"
                    }
                  },
                  "code": "print",
                  "currencies":["USD", "EUR"],
                  "locales":["en_US", "fr_FR", "de_DE"],
                  "category_tree":"master",
                  "conversion_units":{},
                  "labels":{
                    "en_US":"Print",
                    "fr_FR":"Print",
                    "de_DE":"Print"
                  }
                }
              ]
            }
          }
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        406:
          $ref: "#/responses/406Error"
    post:
      summary: Create a new channel
      operationId: "channels_post"
      description: This endpoint allows you to create a new channel.
      tags:
        - Channels
      x-versions:
        - 2.0
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Channel"
      responses:
        201:
          $ref: "#/responses/Created"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"
    patch:
      summary: Update/create several channels
      operationId: "several_channels_patch"
      tags:
        - Channels
      x-versions:
        - 2.0
      description: This endpoint allows you to update and/or create several channels at once.
      x-body-by-line: Contains several lines, each line is a channel in JSON standard format
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Channel"
            x-examples:
              x-example-1:
                '{"code":"ecommerce_fr", "category_tree": "master", "currencies": ["EUR"], "locales": ["fr_FR"], "labels":{"fr_FR": "Ecommerce Fr"}}'
              x-example-2:
                '{"code":"ecommerce_ch", "type":"bar"}'
              x-example-3:
                '{"code":"tablet", "labels":{"en_US": "Tablet", "fr_FR": "Tablette"}}'
      responses:
        200:
          description: OK
          x-details: Returns a plain text response whose lines are JSON containing the status of each update or creation
          schema:
            $ref: "#/definitions/ErrorByLine"
          examples:
            x-example-1:
              '{"line":1,"code":"ecommerce_fr","status_code":201}'
            x-example-2:
              '{"line":2,"code":"ecommerce_ch","status_code":422,"message":"Property \"type\" does not exist. Check the standard format documentation.","_links":{"documentation":{"href":"http:\/\/api.akeneo.com\/api-reference.html#patch_channels__code_"}'
            x-example-3:
              '{"line":3,"code":"tablet","status_code":204}'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        413:
          $ref: "#/responses/413Error"
        415:
          $ref: "#/responses/415ErrorStream"
  /api/rest/v1/channels/{code}:
    get:
      summary: Get a channel
      operationId: "get_channels__code_"
      description: This endpoint allows you to get the information about a given channel.
      tags:
        - Channels
      x-versions:
        - 1.7
        - 2.0
      parameters:
        - $ref: '#/parameters/code'
      responses:
        200:
          description: OK
          x-details: Returns the content of the channel in JSON standard format
          schema:
            $ref: '#/definitions/Channel'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        404:
          $ref: "#/responses/404Error"
        406:
          $ref: "#/responses/406Error"
    patch:
      summary: Update/create a channel
      operationId: "channels_patch"
      tags:
        - Channels
      x-versions:
        - 2.0
      description: This endpoint allows you to update a given channel. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no channel exists for the given code, it creates it.
      parameters:
        - $ref: '#/parameters/code'
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/Channel"
      responses:
        201:
          $ref: "#/responses/Created"
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"

  /api/rest/v1/channels/currencies:
    get:
      summary: Get a list of currencies
      operationId: "currencies_get_list"
      description: This endpoint allows you to get a list of currencies. Currencies are paginated and sorted by code.
      tags:
        - Currencies
      x-versions:
        - 2.0
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/with_count'
      responses:
        200:
          description: Return currencies paginated
          schema:
            title: Currencies
            type: object
            allOf:
              - $ref: '#/definitions/Pagination'
              - properties:
                  _embedded:
                    type: object
                    properties:
                      _items:
                        type: array
                        items:
                          $ref: '#/definitions/CurrencyList'
          examples: {
            _links: {
              self: {
                href: "https://demo.akeneo.com/api/rest/v1/currencies?page=1&limit=3"
              },
              first: {
                href: "https://demo.akeneo.com/api/rest/v1/currencies?page=1&limit=3"
              }
            },
            current_page: 1,
            _embedded: {
              _items: [
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/currencies/ADP"
                    }
                  },
                  "code": "ADP",
                  "enabled": true
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/currencies/AED"
                    }
                  },
                  "code": "AED",
                  "enabled": true
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/currencies/AFA"
                    }
                  },
                  "code": "AFA",
                  "enabled": false
                }
              ]
            }
          }
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        406:
          $ref: "#/responses/406Error"
  /api/rest/v1/currencies/{code}:
    get:
      summary: Get a currency
      operationId: "currencies_get"
      description: This endpoint allows you to get the information about a given currency.
      tags:
        - Currencies
      x-versions:
        - 2.0
      parameters:
        - $ref: '#/parameters/code'
      responses:
        200:
          description: OK
          x-details: Returns the content of the currency in JSON standard format
          schema:
            $ref: '#/definitions/Currency'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        404:
          $ref: "#/responses/404Error"
        406:
          $ref: "#/responses/406Error"

  /api/rest/v1/measure-families:
    get:
      summary: Get list of measure familiy
      operationId: "measure_families_get_list"
      description: This endpoint allows you to get a list of measure families. Measure families are paginated and sorted by code.
      tags:
        - Measure families
      x-versions:
        - 2.0
      responses:
        200:
          description: Return measure families paginated
          schema:
            title: Measure Families
            type: object
            allOf:
              - $ref: '#/definitions/Pagination'
              - properties:
                  _embedded:
                    type: object
                    properties:
                      _items:
                        type: array
                        items:
                          $ref: '#/definitions/MeasureFamilyList'
          examples: {
            _links: {
                "self": {
                  "href": "https://demo.akeneo.com/api/rest/v1/measure-families?page=1&limit=1"
                },
                "first": {
                  "href": "https://demo.akeneo.com/api/rest/v1/measure-families?page=1&limit=1"
                }
              },
            "current_page": 1,
            _embedded: {
              "items": [
                {
                  "_links": {
                      "self": {
                        "href": "https://demo.akeneo.com/api/rest/v1/measure-families/Area"
                      }
                    },
                    "code": "Area",
                    "standard": "SQUARE_METER",
                    "units": [
                      {
                        "code": "SQUARE_MILLIMETER",
                        "convert": {
                          "mul": "0.000001"
                        },
                        "symbol": "mm\u00b2"
                      },
                      {
                        "code": "SQUARE_CENTIMETER",
                        "convert": {
                          "mul": "0.0001"
                        },
                        "symbol": "cm\u00b2"
                      },
                      {
                        "code": "SQUARE_DECIMETER",
                        "convert": {
                          "mul": "0.01"
                        },
                        "symbol": "dm\u00b2"
                      },
                      {
                        "code": "SQUARE_METER",
                        "convert": {
                          "mul": "1"
                        },
                        "symbol": "m\u00b2"
                      },
                      {
                        "code": "CENTIARE",
                        "convert": {
                          "mul": "1"
                        },
                        "symbol": "ca"
                      },
                      {
                        "code": "SQUARE_DEKAMETER",
                        "convert": {
                          "mul": "100"
                        },
                        "symbol": "dam\u00b2"
                      },
                      {
                        "code": "ARE",
                        "convert": {
                          "mul": "100"
                        },
                        "symbol": "a"
                      },
                      {
                        "code": "SQUARE_HECTOMETER",
                        "convert": {
                          "mul": "10000"
                        },
                        "symbol": "hm\u00b2"
                      }
                  ]
                }
              ]
            }
          }
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        406:
          $ref: "#/responses/406Error"
  /api/rest/v1/measure-families/{code}:
    get:
      summary: Get a measure family
      operationId: "measure_families_get"
      description: This endpoint allows you to get the information about a given measure family.
      tags:
        - Measure families
      x-versions:
        - 2.0
      parameters:
        - $ref: '#/parameters/code'
      responses:
        200:
          description: OK
          x-details: Returns the content of the measure family in JSON standard format
          schema:
            $ref: '#/definitions/MeasureFamily'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        404:
          $ref: "#/responses/404Error"
        406:
          $ref: "#/responses/406Error"

  /api/rest/v1/association-types:
    get:
      summary: Get a list of association types
      operationId: "association_types_get_list"
      description: This endpoint allows you to get a list of association types. Association types are paginated and sorted by code.
      tags:
        - Association types
      x-versions:
        - 2.0
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/with_count'
      responses:
        200:
          description: Return association types paginated
          schema:
            title: Association types
            type: object
            allOf:
              - $ref: '#/definitions/Pagination'
              - properties:
                  _embedded:
                    type: object
                    properties:
                      _items:
                        type: array
                        items:
                          $ref: '#/definitions/AssociationTypeList'
          examples: {
            _links: {
              self: {
                href: "https://demo.akeneo.com/api/rest/v1/association-types?page=1&limit=3"
              },
              first: {
                href: "https://demo.akeneo.com/api/rest/v1/association-types?page=1&limit=3"
              }
            },
            current_page: 1,
            _embedded: {
              _items: [
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/association-types/X_SELL"
                    }
                  },
                  "code": "X_SELL",
                  "labels": {
                    "en_US":"Cross sell",
                    "fr_FR":"Vente croisée"
                  }
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/association-types/UPSELL"
                    }
                  },
                  "code": "UPSELL",
                  "labels": {
                    "en_US":"Upsell",
                    "fr_FR":"Vente incitative"
                  }
                },
                {
                  "_links": {
                    "self": {
                      "href": "https://demo.akeneo.com/api/rest/v1/association-types/SUBSTITUTION"
                    }
                  },
                  "code": "SUBSTITUTION",
                  "labels": {
                    "en_US":"Substitution",
                    "fr_FR":"Remplacement"
                  }
                }
              ]
            }
          }
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        406:
          $ref: "#/responses/406Error"
    post:
      summary: Create a new association type
      operationId: "association_types_post"
      description: This endpoint allows you to create a new association type.
      tags:
        - Association types
      x-versions:
        - 2.0
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/AssociationType"
      responses:
        201:
          $ref: "#/responses/Created"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"
    patch:
      summary: Update/create several association types
      operationId: "several_association_types_patch"
      tags:
        - Association types
      x-versions:
        - 2.0
      description: This endpoint allows you to update and/or create several association types at once.
      x-body-by-line: Contains several lines, each line is an association type in JSON standard format
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/AssociationType"
            x-examples:
              x-example-1:
                '{"code":"new_sell"}'
              x-example-2:
                '{"code":"substitution", "type":"bar"}'
              x-example-3:
                '{"code":"x_sell", "labels": {"fr_FR":null}}'
      responses:
        200:
          description: OK
          x-details: Returns a plain text response whose lines are JSON containing the status of each update or creation
          schema:
            $ref: "#/definitions/ErrorByLine"
          examples:
            x-example-1:
              '{"line":1,"code":"new_sell","status_code":201}'
            x-example-2:
              '{"line":2,"code":"substitution","status_code":422,"message":"Property \"type\" does not exist. Check the standard format documentation.","_links":{"documentation":{"href":"http:\/\/api.akeneo.com\/api-reference.html#patch_association_types__code_"}'
            x-example-3:
              '{"line":3,"code":"x_sell","status_code":204}'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        413:
          $ref: "#/responses/413Error"
        415:
          $ref: "#/responses/415ErrorStream"
  /api/rest/v1/association-types/{code}:
    get:
      summary: Get an association type
      operationId: "association_types_get"
      description: This endpoint allows you to get the information about a given association type.
      tags:
        - Association types
      x-versions:
        - 2.0
      parameters:
        - $ref: '#/parameters/code'
      responses:
        200:
          description: OK
          x-details: Returns the content of the association type in JSON standard format
          schema:
            $ref: '#/definitions/AssociationType'
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        404:
          $ref: "#/responses/404Error"
        406:
          $ref: "#/responses/406Error"
    patch:
      summary: Update/create an association type
      operationId: "association_types_patch"
      tags:
        - Association types
      x-versions:
        - 2.0
      description: This endpoint allows you to update a given association type. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no association type exists for the given code, it creates it.
      parameters:
        - $ref: '#/parameters/code'
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/AssociationType"
      responses:
        201:
          $ref: "#/responses/Created"
        204:
          $ref: "#/responses/NoContent"
        400:
          $ref: "#/responses/400Error"
        401:
          $ref: "#/responses/401Error"
        403:
          $ref: "#/responses/403Error"
        415:
          $ref: "#/responses/415Error"
        422:
          $ref: "#/responses/422Error"

definitions:
  Product:
    type: object
    required: ["identifier"]
    properties:
      identifier:
        type: string
        description: Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
      enabled:
        type: boolean
        description: Whether the product is enable
        default: true
      family:
        type: string
        description: Family code from which the product inherits its attributes and attributes requirements
        x-validation-rules: It is equal to an existing family code. In the case of variant product, the given family should be the same as the product model family.
        default: "null only in the case of a non variant product"
      categories:
        type: array
        description: Codes of the categories in which the product is classified
        x-validation-rules: Each string of the array is equal to an existing category code
        items:
          type: string
        default: []
      groups:
        type: array
        description: Codes of the groups to which the product belong
        x-validation-rules: Each string of the array is equal to an existing group code
        items:
          type: string
        default: []
      parent:
        type: string
        description: Code of the parent product model when the product is a variant
        x-validation-rules: It is equal to an existing product model code only if the product is variant otherwise it's equal to null
        default: "null"
        x-immutable: true
      values:
        type: object
        description: "Product attributes values, see <a href='/documentation/resources.html#product-values'>Product values</a> section for more details"
        x-validation-rules: Validation rules detailed in Product values section
        properties:
          attributeCode:
            type: array
            items:
              type: object
              properties:
                scope:
                  type: string
                  description: Channel code of the product value
                locale:
                  type: string
                  description: Locale code of the product value
                data:
                  type: object
                  description: Product value
      associations:
        type: object
        description: Several associations related to groups and/or other products, grouped by association types
        x-validation-rules: "&bull; The `associationTypeCode` is the code of an existing association type. &#10;&bull; Each string in the array of the property `groups` is the code of an existing group. &#10;&bull; Each string in the array of the property `products` is the identifier of an existing product. &#10;&bull; Identifiers used in the array of the property `products` cannot be equal to the product identifier."
        properties:
          associationTypeCode:
            type: object
            properties:
              groups:
                type: array
                description: Array of groups codes with which the product is in relation
                items:
                  type: string
              products:
                type: array
                description: Array of product identifiers with which the product is in relation
                items:
                  type: string
      created:
        type: string
        description: Date of creation
        format: dateTime
        x-immutable: true
        x-read-only: true
      updated:
        type: string
        description: Date of the last update
        format: dateTime
        x-read-only: true
    example: {
      "identifier": "top",
      "enabled": true,
      "family": "tshirt",
      "categories": ["summer_collection"],
      "groups": [],
      "parent": null,
      "values": {
        "name": [
          {
            "data": "Top",
            "locale": "en_US",
            "scope": null,
          },
          {
            "data": "Débardeur",
            "locale": "fr_FR",
            "scope": null,
          }
        ],
        "description": [
          {
            "data": "Summer top",
            "locale": "en_US",
            "scope": "ecommerce"
          },
          {
            "data": "Top",
            "locale": "en_US",
            "scope": "tablet"
          },
          {
            "data": "Débardeur pour l'été",
            "locale": "fr_FR",
            "scope": "ecommerce"
          },
          {
            "data": "Débardeur",
            "locale": "fr_FR",
            "scope": "tablet"
          }
        ],
        "price": [
          {
            "locale": null,
            "scope": null,
            "data": [
              {
                "amount": "15.5", "currency": "EUR"
              },
              {
                "amount": "15", "currency": "USD"
              }
            ]
          }
        ],
        "color": [
          {
            "locale": null,
            "scope": null,
            "data": "black"
          }
        ],
        "size": [
          {
            "locale": null,
            "scope": null,
            "data": "m"
          }
        ]
      },
      "created": "2016-06-23T18:24:44+02:00",
      "updated": "2016-06-25T17:56:12+02:00",
      "associations": {
        "PACK": {
          "products": ["sunglass"],
           "groups": []
        }
      }
    }
  ProductList:
    type: object
    allOf:
      - $ref:  '#/definitions/ItemList'
      - $ref: '#/definitions/Product'
  ProductModelList:
    type: object
    allOf:
      - $ref:  '#/definitions/ItemList'
      - $ref: '#/definitions/ProductModel'
  ProductModel:
    type: object
    required: ["code", "family_variant"]
    properties:
      code:
        type: string
        description: Product model code
        x-immutable: true
      family_variant:
        type: string
        description: Family variant code from which the product model inherits its attributes and variant attributes
        x-validation-rules: It is equal to an existing family variant code
        x-immutable: true
      parent:
        type: string
        description: Code of the parent product model
        x-validation-rules: "&bull; It is equal to an existing product model code&#10;&bull; This product model has the same family variant as the one given in the `family_variant field`"
        default: "null"
        x-immutable: true
      categories:
        type: array
        description: Codes of the categories in which the product model is categorized
        x-validation-rules: Each string of the array is equal to an existing category code
        items:
          type: string
        default: []
      values:
        type: object
        description: "Product model attributes values, see <a href='/documentation/resources.html#product-values'>Product values</a> section for more details"
        x-validation-rules: Validation rules detailed in Product values section
        properties:
          attributeCode:
            type: array
            items:
              type: object
              properties:
                scope:
                  type: string
                  description: Channel code of the product value
                locale:
                  type: string
                  description: Locale code of the product value
                data:
                  type: object
                  description: Product value
      created:
        type: string
        description: Date of creation
        format: dateTime
        x-immutable: true
        x-read-only: true
      updated:
        type: string
        description: Date of the last update
        format: dateTime
        x-read-only: true
    example: {
      "code": "model-biker-jacket-leather",
      "family_variant": "clothing_material_size",
      "parent": "model-biker-jacket",
      "categories": ["summer_collection"],
      "values": {
        "color": [
          {
            "locale": null,
            "scope": null,
            "data": "antique_white"
          }
        ],
        "material": [
          {
            "locale": null,
            "scope": null,
            "data": "leather"
          }
        ],
        "variation_name": [
          {
            "locale": "en_US",
            "scope": null,
            "data": "Biker jacket leather"
          }
        ],
        "name": [
          {
            "locale": "en_US",
            "scope": null,
            "data": "Biker jacket"
          }
        ],
        "collection": [
          {
            "locale": null,
            "scope": null,
            "data": ["summer_2017"]
          }
        ],
        "description": [
          {
            "locale": "en_US",
            "scope": "ecommerce",
            "data": "Biker jacket"
          }
        ]
      },
      "created": "2017-10-02T15:03:55+02:00",
      "updated": "2017-10-02T15:03:55+02:00"
    }
  PublishedProduct:
    type: object
    required: ["identifier"]
    properties:
      identifier:
        type: string
        description: Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
      enabled:
        type: boolean
        description: Whether the published product is enable
        default: true
      family:
        type: string
        description: Family code from which the published product inherits its attributes and attributes requirements
        x-validation-rules: It is equal to an existing family code
        default: "null"
      categories:
        type: array
        description: Codes of the categories in which the published product is classified
        x-validation-rules: Each string of the array is equal to an existing category code
        items:
          type: string
        default: []
      groups:
        type: array
        description: Codes of the groups to which the published product belong
        x-validation-rules: Each string of the array is equal to an existing group code
        items:
          type: string
        default: []
      values:
        type: object
        description: "Published product attributes values, see <a href='/documentation/resources.html#product-values'>Product values</a> section for more details"
        x-validation-rules: Validation rules detailed in Product values section
        properties:
          attributeCode:
            type: array
            items:
              type: object
              properties:
                scope:
                  type: string
                  description: Channel code of the product value
                locale:
                  type: string
                  description: Locale code of the product value
                data:
                  type: object
                  description: Product value
      associations:
        type: object
        description: Several associations related to groups and/or other published products, grouped by association types
        x-validation-rules: "&bull; The `associationTypeCode` is the code of an existing association type. &#10;&bull; Each string in the array of the property `groups` is the code of an existing group. &#10;&bull; Each string in the array of the property `products` is the identifier of an existing product. &#10;&bull; Identifiers used in the array of the property `products` cannot be equal to the published product identifier."
        properties:
          associationTypeCode:
            type: object
            properties:
              groups:
                type: array
                description: Array of groups codes with which the published product is in relation
                items:
                  type: string
              products:
                type: array
                description: Array of published product identifiers with which the published product is in relation
                items:
                  type: string
      created:
        type: string
        description: Date of creation
        format: dateTime
        x-immutable: true
        x-read-only: true
      updated:
        type: string
        description: Date of the last update
        format: dateTime
        x-read-only: true
    example: {
      "identifier": "top",
      "enabled": true,
      "family": "tshirt",
      "categories": ["summer_collection"],
      "groups": [],
      "values": {
        "name": [
          {
            "data": "Top",
            "locale": "en_US",
            "scope": null,
          },
          {
            "data": "Débardeur",
            "locale": "fr_FR",
            "scope": null,
          }
        ],
        "description": [
          {
            "data": "Summer top",
            "locale": "en_US",
            "scope": "ecommerce"
          },
          {
            "data": "Top",
            "locale": "en_US",
            "scope": "tablet"
          },
          {
            "data": "Débardeur pour l'été",
            "locale": "fr_FR",
            "scope": "ecommerce"
          },
          {
            "data": "Débardeur",
            "locale": "fr_FR",
            "scope": "tablet"
          }
        ],
        "price": [
          {
            "locale": null,
            "scope": null,
            "data": [
              {
                "amount": "15.5", "currency": "EUR"
              },
              {
                "amount": "15", "currency": "USD"
              }
            ]
          }
        ],
        "color": [
          {
            "locale": null,
            "scope": null,
            "data": "black"
          }
        ],
        "size": [
          {
            "locale": null,
            "scope": null,
            "data": "m"
          }
        ]
      },
      "created": "2016-06-23T18:24:44+02:00",
      "updated": "2016-06-25T17:56:12+02:00",
      "associations": {
        "PACK": {
          "products": ["sunglass"],
           "groups": []
        }
      }
    }
  PublishedProductList:
    type: object
    allOf:
      - $ref:  '#/definitions/ItemList'
      - $ref: '#/definitions/PublishedProduct'
  Category:
    type: object
    required: ["code"]
    properties:
      code:
        type: string
        description: Category code
        x-immutable: true
      parent:
        type: string
        description: Category code of the parent's category
        x-validation-rules: "&bull; It is either equal to `null` or to an existing category code. &#10;&bull; If equal to an existing category code, it cannot reference itself."
        default: "null"
      labels:
        type: object
        description: Category labels for each locale
        x-validation-rules: The `localeCode` is the code of an existing and activated locale
        default: {}
        properties:
          localeCode:
            type: string
            description: Category label for the locale `localeCode`
    example: {
      "code": "winter_collection",
      "parent": null,
      "labels": {
        "en_US": "Winter collection",
        "fr_FR": "Collection hiver"
      }
    }
  CategoryList:
    type: object
    allOf:
      - $ref:  '#/definitions/ItemList'
      - $ref: '#/definitions/Category'
  MeasureFamily:
    type: object
    required: ["code"]
    properties:
      code:
        type: string
        description: Measure family code
        x-immutable: true
      standard:
        type: string
        description: Measure family standard
        x-immutable: true
      units:
        type: array
        description: Family units
        items:
          type: object
          properties:
            code:
              type: string
              description: Measure code
              x-immutable: true
            convert:
              type: object
              description: Mathematic operation to convert the unit into the standard unit
            symbol:
              type: string
              description: Measure symbol
              x-immutable: true
    example: {
      "code": "Area",
      "standard": "SQUARE_METER",
      "units": [
        {
          "code": "SQUARE_MILLIMETER",
          "convert": {
            "mul": 1.0e-6
          },
          "symbol": "mm\u00b2"
        },
        {
          "code": "SQUARE_CENTIMETER",
          "convert": {
            "mul": 0.0001
          },
          "symbol": "cm\u00b2"
        },
      ]
    }
  MeasureFamilyList:
    type: object
    allOf:
      - $ref:  '#/definitions/ItemList'
      - $ref: '#/definitions/MeasureFamily'
  Family:
    type: object
    required: ["code", "attribute_as_label"]
    properties:
      code:
        type: string
        description: Family code
        x-immutable: true
      attribute_as_label:
        type: string
        description: Attribute code used as label
        x-validation-rules: "&bull; It is equal to an existing attribute code &#10;&bull; This attribute code is in the array of the property `attributes` &#10;&bull; The type of this attribute is either `pim_catalog_identifier` or `pim_catalog_text`"
      attribute_as_image:
        type: string
        description: Attribute code used as the main picture in the user interface
        x-validation-rules: "&bull; It is equal to an existing attribute code &#10;&bull; This attribute code is in the array of the property `attributes` &#10;&bull; The type of this attribute is `pim_catalog_image`"
        default: "null"
      attributes:
        type: array
        description: Attributes codes that compose the family
        x-validation-rules: Each string of the array is an existing attribute code
        items:
          type: string
        default: []
      attribute_requirements:
        type: object
        description: Attributes codes of the family that are required for the completeness calculation for each channel
        x-validation-rules: "&bull; Each string of these arrays are existing attributes codes &#10;&bull; These attribute codes are in the array of the property `attributes` &#10;&bull; The `channelCode` is the code of an existing and activated channel"
        properties:
          channelCode:
            type: array
            items:
              type: string
              description: Attributes codes of the family that are required for the completeness calculation for the channel `channelCode`
      labels:
        type: object
        description: Family labels for each locale
        x-validation-rules: The `localeCode` is the code of an existing and activated locale
        default: {}
        properties:
          localeCode:
            type: string
            description: Family label for the locale `localeCode`
    example: {
      "code": "caps",
      "attributes": ["sku", "name", "description", "price", "color", "picture"],
      "attribute_as_label": "name",
      "attribute_as_image": "picture",
      "attribute_requirements": {
        "ecommerce": ["sku", "name", "description", "price", "color"],
        "tablet": ["sku", "name", "description", "price"]
      },
      "labels": {
        "en_US": "Caps",
        "fr_FR": "Casquettes"
      }
    }
  FamilyList:
    type: object
    allOf:
      - $ref:  '#/definitions/ItemList'
      - $ref: '#/definitions/Family'
  FamilyVariant:
    type: object
    required: ["code"]
    properties:
      code:
        type: string
        description: Family variant code
        x-immutable: true
      variant_attribute_sets:
        type: array
        description: Attributes distribution according to the enrichment level
        items:
          type: object
          required: ["level", "axes"]
          description: Enrichment level
          properties:
            level:
              type: integer
              description: Enrichment level 
              x-immutable: true
            attributes:
              type: array
              description: Each string of the array is an attribute code bind to this enrichment level
              items:
                type: string
              default: []
            axes:
              type: array
              description: Each string of the array is an attribute code that will be used as variant axis
              items:
                type: string
              default: []
      labels:
        type: object
        description: Family variant labels for each locale
        x-validation-rules: The `localeCode` is the code of an existing and activated locale
        default: {}
        properties:
          localeCode:
            type: string
            description: Family variant label for the locale `localeCode`
    example: {
      "code": "shoesVariant",
      "labels":{
        "en_US": "Shoes variant",
        "fr_FR": "Variante de chaussures"
      },
      "variant_attribute_sets": [
        {
          "level": 1,
          "attributes": ["color", "material"],
          "axes": ["color"]
        },
        {
            "level": 2,
            "attributes": ["sku", "size"],
            "axes": ["size"]
        }
      ]
    }
  FamilyVariantList:
    type: object
    allOf:
      - $ref:  '#/definitions/ItemList'
      - $ref: '#/definitions/FamilyVariant'
  Attribute:
    type: object
    required: ["code", "type", "group"]
    properties:
      code:
        type: string
        description: Attribute code
        x-immutable: true
      type:
        type: string
        description: Attribute type
        x-validation-rules: The type is one of the following values
        enum: ['pim_catalog_identifier', 'pim_catalog_metric', 'pim_catalog_number', 'pim_catalog_reference_data_multi_select', 'pim_catalog_reference_data_simple_select', 'pim_catalog_simpleselect', 'pim_catalog_multiselect', 'pim_catalog_date', 'pim_catalog_textarea', 'pim_catalog_text', 'pim_catalog_file', 'pim_catalog_image', 'pim_catalog_price', 'pim_catalog_boolean']
        x-immutable: true
      labels:
        type: object
        description: Attribute labels for each locale
        x-validation-rules: The `localeCode` is the code of an existing and activated locale
        default: {}
        properties:
          localeCode:
            type: string
            description: Attribute label for the locale `localeCode`
      group:
        type: string
        description: Attribute group
        x-validation-rules: It is the code of an existing group
      sort_order:
        type: integer
        description: Order of the attribute in its group
        x-validation-rules: It is a positive integer
        default: 0
      localizable:
          type: boolean
          description: Whether the attribute is localizable, i.e. can have one value by locale
          default: false
          x-immutable: true
      scopable:
          type: boolean
          description: Whether the attribute is scopable, i.e. can have one value by channel
          default : false
          x-immutable: true
      available_locales:
        type: array
        description: To make the attribute locale specfic, specify here for which locales it is specific
        x-validation-rules: Each string of the array is an existing and activated locale
        items:
          type: string
      unique:
        type: boolean
        description: Whether two values for the attribute cannot be the same
        x-immutable: true
      useable_as_grid_filter:
        type: boolean
        description: Whether the attribute can be used as a filter for the product grid in the PIM user interface
      max_characters:
        type: integer
        description: Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
        x-warning: Only for `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier` attribute types
      validation_rule:
        type: string
        description: Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
        x-validation-rules: Equal to `regexp` when the attribute type is equal to `pim_catalog_identifier`
        x-warning: Only for `pim_catalog_text` or `pim_catalog_identifier` attribute types
      validation_regexp:
        type: string
        description: Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
        x-validation-rules: Required when the property `validation_rule` is equal to `regexp`
        x-warning: Only for `pim_catalog_text` or `pim_catalog_identifier` attribute types
      wysiwyg_enabled:
        type: boolean
        description: Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
        x-warning: Only for `pim_catalog_textarea` attribute type
      number_min:
        type: string
        description: Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
        x-warning: Only for `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` attribute types
      number_max:
        type: string
        description: Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
        x-warning: Only for `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` attribute types
      decimals_allowed:
        type: boolean
        description: Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
        x-warning: Only for `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` attribute types
      negative_allowed:
        type: boolean
        description: Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
        x-warning: Only for `pim_catalog_metric` or `pim_catalog_number` attribute types
      metric_family:
        type: string
        description: Metric family when the attribute type is `pim_catalog_metric`
        x-immutable: true
        x-validation-rules: Required for `pim_catalog_metric` attribute type
        x-warning: Only for `pim_catalog_metric` attribute type
      default_metric_unit:
        type: string
        description: Default metric unit when the attribute type is `pim_catalog_metric`
        x-validation-rules: Required for `pim_catalog_metric` attribute type
        x-warning: Only for `pim_catalog_metric` attribute type
      date_min:
        type: string
        description: Minimum date allowed when the attribute type is `pim_catalog_date`
        x-validation-rules: The datetime format follows the ISO-8601 norm
        x-warning: Only for `pim_catalog_date` attribute type
        format: date-time
      date_max:
        type: string
        description: Maximum date allowed when the attribute type is `pim_catalog_date`
        x-validation-rules: The datetime format follows the ISO-8601 norm
        x-warning: Only for `pim_catalog_date` attribute type
        format: date-time
      allowed_extensions:
        type: array
        description: Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
        x-warning: Only for `pim_catalog_file` or `pim_catalog_image` attribute types
        items:
          type: string
      max_file_size:
        type: string
        description: Max file size when the attribute type is `pim_catalog_file` or `pim_catalog_image`
        x-warning: Only for `pim_catalog_file` or `pim_catalog_image` attribute types
    example: {
      "code": "release_date",
      "type": "pim_catalog_date",
      "group": "marketing",
      "unique": false,
      "useable_as_grid_filter": true,
      "allowed_extensions": [],
      "metric_family": null,
      "default_metric_unit": null,
      "reference_data_name": null,
      "available_locales": [],
      "max_characters": null,
      "validation_rule": null,
      "validation_regexp": null,
      "wysiwyg_enabled": null,
      "number_min": null,
      "number_max": null,
      "decimals_allowed": null,
      "negative_allowed": null,
      "date_min": "2017-06-28T08:00:00",
      "date_max": "2017-08-08T22:00:00",
      "max_file_size": null,
      "minimum_input_length": null,
      "sort_order": 1,
      "localizable": false,
      "scopable": false,
      "labels": {
        "en_US": "Sale date",
        "fr_FR": "Date des soldes"
      }
    }
  AttributeList:
    type: object
    allOf:
      - $ref:  '#/definitions/ItemList'
      - $ref: '#/definitions/Attribute'
  AttributeOption:
    type: object
    properties:
      code:
        type: string
        description: Code of option
      attribute:
        type: string
        description: Code of attribute related to the attribute option
      sort_order:
        type: integer
        description: Order of attribute option
      labels:
        type: object
        description: Attribute option labels for each locale
        x-validation-rules: The `localeCode` is the code of an existing and activated locale
        default: {}
        properties:
          localeCode:
            type: string
            description: Attribute option label for the locale `localeCode`
    example: {
      "code": "black",
      "attribute": "a_simple_select",
      "sort_order": 2,
      "labels": {
        "en_US": "Black",
        "fr_FR": "Noir"
      }
    }
  AttributeOptionList:
    type: object
    allOf:
      - $ref:  '#/definitions/ItemList'
      - $ref: '#/definitions/AttributeOption'
  AttributeGroup:
    type: object
    required: ["code"]
    properties:
      code:
        type: string
        description: Attribute group code
        x-immutable: true
      sort_order:
        type: integer
        description: Attribute group order among other attribute groups
        x-validation-rules: It is a positive integer
        default: 0
      attributes:
        type: array
        description: Attribute codes that compose the attribute group
        x-validation-rules: Each string of the array is an existing attribute code, an attribute can only be in one attribute group
        items:
          type: string
        default: []
      labels:
        type: object
        description: Attribute group labels for each locale
        x-validation-rules: The `localeCode` is the code of an existing and activated locale
        default: {}
        properties:
          localeCode:
            type: string
            description: Attribute group label for the locale `localeCode`
    example: {
      "code":"marketing",
      "sort_order":4,
      "attributes":[
         "sku",
         "name",
         "description",
         "response_time",
         "release_date",
         "price"
      ],
      "labels":{
         "en_US":"Marketing",
         "fr_FR":"Marketing"
      }
    }
  AttributeGroupList:
    type: object
    allOf:
      - $ref:  '#/definitions/ItemList'
      - $ref: '#/definitions/AttributeGroup'
  MediaFile:
    type: object
    properties:
      code:
        type: string
        description: Media file code
        x-immutable: true
      original_filename:
        type: string
        description: Original filename of the media file
      mime_type:
        type: string
        description: Mime type of the media file
        x-read-only: true
      size:
        type: integer
        description: Size of the media file
        x-read-only: true
      extension:
        type: string
        description: Extension of the media file
        x-read-only: true
      _links:
        type: object
        description: Link to download the media file binaries
        x-read-only: true
        properties:
          download:
            type: object
            properties:
              href:
                type: string
                description: Link to download the media file binaries
    example: {
      "code": "7/5/8/e/758e39d48ea7b42a55091434fd3d8b6cf3189b7f_10806799_1356.jpg",
      "original_filename": "10806799-1356.jpg",
      "mime_type": "image/jpeg",
      "size": 16070,
      "extension": "jpg",
      "_links": {
        "download": {
          "href": "https://demo.akeneo.com/api/rest/v1/media-files/7/5/8/e/758e39d48ea7b42a55091434fd3d8b6cf3189b7f_10806799_1356.jpg/download"
        }
      }
    }
  MediaFileList:
    type: object
    allOf:
      - $ref: '#/definitions/MediaFileItemList'
      - $ref: '#/definitions/MediaFile'
  Locale:
    type: object
    required: ["code"]
    properties:
      code:
        type: string
        description: Locale code
        x-immutable: true
      enabled:
        type: boolean
        description: Whether the locale is enabled
        default: false
    example: {
      "code": "en_US",
      "enable": true
    }
  LocaleList:
    type: object
    allOf:
      - $ref: '#/definitions/ItemList'
      - $ref: '#/definitions/Locale'
  Channel:
    type: object
    required: ["code", "category_tree", "locales", "currencies"]
    properties:
      code:
        type: string
        description: Channel code
        x-immutable: true
      locales:
        type: array
        description: Codes of activated locales for the channel
        x-validation-rules: "&bull; Each string of the array is an existing locale code &#10;&bull; At least one locale in the array"
        items:
          type: string
      currencies:
        type: array
        description: Codes of activated currencies for the channel
        x-validation-rules: "&bull; Each string of the array is an existing currency code &#10;&bull; At least one currency in the array"
        items:
          type: string
      category_tree:
        type: string
        description: Code of the category tree linked to the channel
        x-validation-rules: It is the code of an existing category code that is a tree (a category without parent)
      conversion_units:
        type: object
        description: Units to which the given metric attributes should be converted when exporting products
        x-validation-rules: "&bull; The `attributeCode` is the code of an existing attribute whose type is `pim_catalog_metric` &#10;&bull; The strings are existing unit codes."
        properties:
          attributeCode:
            type: string
            description: Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel
      labels:
        type: object
        description: Channel labels for each locale
        x-validation-rules: The `localeCode` is the code of an existing and activated locale
        default: {}
        properties:
          localeCode:
            type: string
            description: Channel label for the locale `localeCode`
    example: {
      "code": "ecommerce",
      "currencies": [
        "USD",
        "EUR"
      ],
      "locales": [
        "de_DE",
        "en_US",
        "fr_FR"
      ],
      "category_tree": "master",
      "conversion_units": {
        "weight": "KILOGRAM"
      },
      "labels": {
        "en_US": "Ecommerce",
        "de_DE": "Ecommerce",
        "fr_FR": "Ecommerce"
      }
    }
  ChannelList:
    type: object
    allOf:
      - $ref:  '#/definitions/ItemList'
      - $ref: '#/definitions/Channel'
  AssociationType:
    type: object
    required: ["code"]
    properties:
      code:
        type: string
        description: Association type code
        x-immutable: true
      labels:
        type: object
        description: Association type labels for each locale
        x-validation-rules: The `localeCode` is the code of an existing and activated locale
        default: {}
        properties:
          localeCode:
            type: string
            description: Association type label for the locale `localeCode`
    example: {
      "code": "upsell",
      "labels": {
        "en_US": "Upsell",
        "fr_FR": "Vente incitative"
      }
    }
  AssociationTypeList:
    type: object
    allOf:
      - $ref:  '#/definitions/ItemList'
      - $ref: '#/definitions/AssociationType'
  Currency:
    type: object
    required: ["code"]
    properties:
      code:
        type: string
        description: Currency code
        x-immutable: true
      enabled:
        type: boolean
        description: Whether the currency is enabled
    example: {
      "code": "EUR",
      "enabled": true
    }
  CurrencyList:
    type: object
    allOf:
      - $ref:  '#/definitions/ItemList'
      - $ref: '#/definitions/Currency'
  Error:
    type: object
    properties:
      code:
        type: integer
        description: HTTP status code
      message:
        type: string
        description: Message explaining the error
  ErrorByLine:
    type: object
    properties:
      line:
        type: integer
        description: Line number
      identifier:
        type: string
        description: Resource identifier, only filled when the resource is a product
      code:
        type: string
        description: Resource code, only filled when the resource is a category, a family or an attribute
      status_code:
        type: integer
        description: HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
      message:
        type: string
        description: Message explaining the error
  Pagination:
    type: object
    properties:
      _links:
        type: object
        properties:
          self:
            type: object
            properties:
              href:
                type: string
                description: URI of the current page of resources
          first:
            type: object
            properties:
              href:
                type: string
                description: URI of the first page of resources
          previous:
            type: object
            properties:
              href:
                type: string
                description: URI of the previous page of resources
          next:
            type: object
            properties:
              href:
                type: string
                description: URI of the next page of resources
      current_page:
        type: integer
        description: Current page number
  ItemList:
    type: object
    properties:
      _links:
        type: object
        properties:
          self:
            type: object
            properties:
              href:
                type: string
                description: URI of the resource
  MediaFileItemList:
    type: object
    properties:
      _links:
        type: object
        properties:
          self:
            type: object
            properties:
              href:
                type: string
                description: URI to get the metadata of the media file
          download:
            type: object
            properties:
              href:
                type: string
                description: URI to download the binaries of the media file

responses:
  Created:
    description: Created
    x-details: Means that the creation was successful
    headers:
      Location:
        description: URI of the created resource
        type: string
  Submitted:
    description: Submitted
    x-details: Means that the draft submission was successful
    headers:
      Location:
        description: URI of the created resource
        type: string
  NoContent:
    description: No content to return
    x-details: Means that the update was successful
    headers:
      Location:
        description: URI of the updated resource
        type: string
  400Error:
    description: Bad request
    x-details: Can be caused by a malformed JSON request
    schema:
      $ref: "#/definitions/Error"
    examples: {
      "code":400,
      "message":"Invalid JSON message received"
    }
  401Error:
    description: Authentication required
    x-details: Can be caused by a missing or expired token
    schema:
      $ref: "#/definitions/Error"
    examples: {
      "code": 401,
      "message": "Authentication is required"
    }
  403Error:
    description: Access forbidden
    x-details: The user does not have the permission to execute this request
    schema:
      $ref: "#/definitions/Error"
    examples: {
      "code":403,
      "message":"Access forbidden. You are not allowed to list categories."
    }
  404Error:
    description: Resource not found
    x-details: The resource code given in the URI does not correspond to any existing PIM resource
    schema:
      $ref: "#/definitions/Error"
    examples: {
      "code": 404,
      "message": "Resource `my_resource_code` does not exist."
    }
  406Error:
    description: Not Acceptable
    x-details: The `Accept` header is not `application/json` but it should
    schema:
      $ref: "#/definitions/Error"
    examples:  {
      "code": 406,
      "message": "‘xxx’ in ‘Accept‘ header is not valid. Only ‘application/json‘ is allowed."
    }
  413Error:
    description: Request Entity Too Large
    x-details: There are too many resources to process (max 100) or the line of JSON is too long (max 1 000 000 characters)
    schema:
      $ref: "#/definitions/Error"
    examples: {
      "code": 413,
      "message": "Too many resources to process, 100 is the maximum allowed."
    }
  415Error:
    description: Unsupported Media type
    x-details: The `Content-type` header has to be `application/json`
    schema:
      $ref: "#/definitions/Error"
    examples: {
      "code": 415,
      "message": "‘xxx’ in ‘Content-type’ header is not valid.  Only ‘application/json’ is allowed."
    }
  415ErrorStream:
    description: Unsupported Media type
    x-details: The `Content-type` header has to be `application/vnd.akeneo.collection+json`
    schema:
      $ref: "#/definitions/Error"
    examples: {
      "code": 415,
      "message": "‘xxx’ in ‘Content-type’ header is not valid.  Only ‘application/vnd.akeneo.collection+json’ is allowed."
    }
  415ErrorMultipart:
    description: Unsupported Media type
    x-details: The `Content-type` header has to be `multipart/form-data`
    schema:
      $ref: "#/definitions/Error"
    examples: {
      "code": 415,
      "message": "‘xxx’ in ‘Content-type’ header is not valid.  Only ‘multipart/form-data’ is allowed."
    }
  422Error:
    description: Unprocessable entity
    x-details: The validation of the entity given in the body of the request failed
    schema:
      $ref: "#/definitions/Error"
    examples: {
      "code": 422,
      "message": "Property \"labels\" expects an array as data, \"NULL\" given. Check the API reference documentation.",
      "_links": {
        "documentation": {
          "href": "http://api.akeneo.com/api-reference.html"
        }
      }
    }

parameters:
  pagination_type:
    name: pagination_type
    in: query
    description: Pagination method type, see <a href="/documentation/pagination.html">Pagination</a> section
    required: false
    type: string
    default: "page"
    x-validation-rules: One of the following values
    enum: ["page", "search_after"]
  page:
    name: page
    in: query
    description: Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
    required: false
    type: integer
    default: 1
  search_after:
    name: search_after
    in: query
    description: Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
    required: false
    type: string
    default: "cursor to the first page"
  limit:
    name: limit
    in: query
    description: Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
    required: false
    type: integer
    minimum: 1
    maximum: 100
    default: 10
  code:
    name: code
    in: path
    description: Code of the resource
    required: true
    type: string
  attribute_code:
    name: attribute_code
    in: path
    description: Code of the attribute
    required: true
    type: string
  family_code:
    name: family_code
    in: path
    description: Code of the family
    required: true
    type: string
  with_count:
    name: with_count
    in: query
    description: Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
    default: false
    type: boolean
    required: false
